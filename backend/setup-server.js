
const { exec } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üöÄ Configurando ambiente do backend para servidor...');

function runCommand(command, description) {
  return new Promise((resolve, reject) => {
    console.log(`\nüìã ${description}...`);
    exec(command, (error, stdout, stderr) => {
      if (error) {
        console.error(`‚ùå Erro: ${error.message}`);
        reject(error);
        return;
      }
      if (stderr) {
        console.log(`‚ö†Ô∏è Warning: ${stderr}`);
      }
      console.log(stdout);
      resolve(stdout);
    });
  });
}

async function setupEnvironment() {
  try {
    // Verificar se est√° no diret√≥rio correto
    if (!fs.existsSync('package.json')) {
      console.error('‚ùå Execute este script dentro da pasta backend!');
      process.exit(1);
    }

    // 1. Instalar depend√™ncias
    await runCommand('npm install', 'Instalando depend√™ncias do Node.js');

    // 2. Gerar Prisma Client
    await runCommand('npx prisma generate', 'Gerando Prisma Client');

    // 3. Executar migra√ß√µes
    await runCommand('npx prisma db push', 'Executando migra√ß√µes do banco');

    console.log('\n‚úÖ Setup conclu√≠do com sucesso!');
    console.log('Para popular o banco: node seed.js');
    console.log('Para iniciar o servidor: npm run dev');
    console.log('Para build de produ√ß√£o: npm run build && npm start');

  } catch (error) {
    console.error('‚ùå Falha no setup:', error.message);
    process.exit(1);
  }
}

setupEnvironment();
