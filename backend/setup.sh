
#!/bin/bash

echo "üöÄ Configurando ambiente do backend..."

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fun√ß√£o para log
log() {
    echo -e "${GREEN}[SETUP]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Verificar se est√° no diret√≥rio backend
if [ ! -f "package.json" ]; then
    error "Execute este script dentro da pasta backend!"
    exit 1
fi

# 1. Instalar depend√™ncias
log "Instalando depend√™ncias do Node.js..."
npm install

if [ $? -ne 0 ]; then
    error "Falha ao instalar depend√™ncias do Node.js"
    exit 1
fi

# 2. Verificar se PostgreSQL est√° dispon√≠vel
log "Verificando PostgreSQL..."
if ! command -v psql &> /dev/null; then
    warning "PostgreSQL n√£o encontrado. Instalando..."
    # No Replit, usar nix
    echo "Adicione 'postgresql' aos m√≥dulos no .replit para instalar PostgreSQL"
fi

# 3. Configurar banco de dados
log "Configurando banco de dados..."

# Criar banco se n√£o existir
createdb financeiro_db 2>/dev/null || {
    warning "Banco financeiro_db j√° existe ou erro ao criar"
}

# 4. Gerar Prisma Client
log "Gerando Prisma Client..."
npx prisma generate

if [ $? -ne 0 ]; then
    error "Falha ao gerar Prisma Client"
    exit 1
fi

# 5. Executar migra√ß√µes
log "Executando migra√ß√µes do banco..."
npx prisma db push

if [ $? -ne 0 ]; then
    error "Falha ao executar migra√ß√µes"
    exit 1
fi

# 6. Criar usu√°rio admin (opcional)
log "Configura√ß√£o conclu√≠da!"
log "Para criar um usu√°rio admin, execute: npm run seed"

echo
log "‚úÖ Setup conclu√≠do com sucesso!"
log "Para iniciar o servidor: npm run dev"
log "Para acessar Prisma Studio: npm run prisma:studio"
echo
