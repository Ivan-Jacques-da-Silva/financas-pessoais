
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Usuario
 * 
 */
export type Usuario = $Result.DefaultSelection<Prisma.$UsuarioPayload>
/**
 * Model Gasto
 * 
 */
export type Gasto = $Result.DefaultSelection<Prisma.$GastoPayload>
/**
 * Model ContaFixa
 * 
 */
export type ContaFixa = $Result.DefaultSelection<Prisma.$ContaFixaPayload>
/**
 * Model Parcela
 * 
 */
export type Parcela = $Result.DefaultSelection<Prisma.$ParcelaPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const TipoGasto: {
  CARTAO_CREDITO: 'CARTAO_CREDITO',
  DEBITO: 'DEBITO',
  PIX: 'PIX',
  BOLETO: 'BOLETO'
};

export type TipoGasto = (typeof TipoGasto)[keyof typeof TipoGasto]


export const StatusPagamento: {
  PAGO: 'PAGO',
  ATRASADO: 'ATRASADO',
  A_PAGAR: 'A_PAGAR'
};

export type StatusPagamento = (typeof StatusPagamento)[keyof typeof StatusPagamento]

}

export type TipoGasto = $Enums.TipoGasto

export const TipoGasto: typeof $Enums.TipoGasto

export type StatusPagamento = $Enums.StatusPagamento

export const StatusPagamento: typeof $Enums.StatusPagamento

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Usuarios
 * const usuarios = await prisma.usuario.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Usuarios
   * const usuarios = await prisma.usuario.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.usuario`: Exposes CRUD operations for the **Usuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuario.findMany()
    * ```
    */
  get usuario(): Prisma.UsuarioDelegate<ExtArgs>;

  /**
   * `prisma.gasto`: Exposes CRUD operations for the **Gasto** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Gastos
    * const gastos = await prisma.gasto.findMany()
    * ```
    */
  get gasto(): Prisma.GastoDelegate<ExtArgs>;

  /**
   * `prisma.contaFixa`: Exposes CRUD operations for the **ContaFixa** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ContaFixas
    * const contaFixas = await prisma.contaFixa.findMany()
    * ```
    */
  get contaFixa(): Prisma.ContaFixaDelegate<ExtArgs>;

  /**
   * `prisma.parcela`: Exposes CRUD operations for the **Parcela** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Parcelas
    * const parcelas = await prisma.parcela.findMany()
    * ```
    */
  get parcela(): Prisma.ParcelaDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Usuario: 'Usuario',
    Gasto: 'Gasto',
    ContaFixa: 'ContaFixa',
    Parcela: 'Parcela'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "usuario" | "gasto" | "contaFixa" | "parcela"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Usuario: {
        payload: Prisma.$UsuarioPayload<ExtArgs>
        fields: Prisma.UsuarioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsuarioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsuarioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findFirst: {
            args: Prisma.UsuarioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsuarioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          findMany: {
            args: Prisma.UsuarioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          create: {
            args: Prisma.UsuarioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          createMany: {
            args: Prisma.UsuarioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UsuarioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>[]
          }
          delete: {
            args: Prisma.UsuarioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          update: {
            args: Prisma.UsuarioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          deleteMany: {
            args: Prisma.UsuarioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsuarioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UsuarioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsuarioPayload>
          }
          aggregate: {
            args: Prisma.UsuarioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsuario>
          }
          groupBy: {
            args: Prisma.UsuarioGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsuarioGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsuarioCountArgs<ExtArgs>
            result: $Utils.Optional<UsuarioCountAggregateOutputType> | number
          }
        }
      }
      Gasto: {
        payload: Prisma.$GastoPayload<ExtArgs>
        fields: Prisma.GastoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GastoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GastoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GastoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GastoPayload>
          }
          findFirst: {
            args: Prisma.GastoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GastoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GastoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GastoPayload>
          }
          findMany: {
            args: Prisma.GastoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GastoPayload>[]
          }
          create: {
            args: Prisma.GastoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GastoPayload>
          }
          createMany: {
            args: Prisma.GastoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GastoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GastoPayload>[]
          }
          delete: {
            args: Prisma.GastoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GastoPayload>
          }
          update: {
            args: Prisma.GastoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GastoPayload>
          }
          deleteMany: {
            args: Prisma.GastoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GastoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GastoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GastoPayload>
          }
          aggregate: {
            args: Prisma.GastoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGasto>
          }
          groupBy: {
            args: Prisma.GastoGroupByArgs<ExtArgs>
            result: $Utils.Optional<GastoGroupByOutputType>[]
          }
          count: {
            args: Prisma.GastoCountArgs<ExtArgs>
            result: $Utils.Optional<GastoCountAggregateOutputType> | number
          }
        }
      }
      ContaFixa: {
        payload: Prisma.$ContaFixaPayload<ExtArgs>
        fields: Prisma.ContaFixaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContaFixaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContaFixaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContaFixaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContaFixaPayload>
          }
          findFirst: {
            args: Prisma.ContaFixaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContaFixaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContaFixaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContaFixaPayload>
          }
          findMany: {
            args: Prisma.ContaFixaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContaFixaPayload>[]
          }
          create: {
            args: Prisma.ContaFixaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContaFixaPayload>
          }
          createMany: {
            args: Prisma.ContaFixaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContaFixaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContaFixaPayload>[]
          }
          delete: {
            args: Prisma.ContaFixaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContaFixaPayload>
          }
          update: {
            args: Prisma.ContaFixaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContaFixaPayload>
          }
          deleteMany: {
            args: Prisma.ContaFixaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContaFixaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ContaFixaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContaFixaPayload>
          }
          aggregate: {
            args: Prisma.ContaFixaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContaFixa>
          }
          groupBy: {
            args: Prisma.ContaFixaGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContaFixaGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContaFixaCountArgs<ExtArgs>
            result: $Utils.Optional<ContaFixaCountAggregateOutputType> | number
          }
        }
      }
      Parcela: {
        payload: Prisma.$ParcelaPayload<ExtArgs>
        fields: Prisma.ParcelaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ParcelaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParcelaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ParcelaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParcelaPayload>
          }
          findFirst: {
            args: Prisma.ParcelaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParcelaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ParcelaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParcelaPayload>
          }
          findMany: {
            args: Prisma.ParcelaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParcelaPayload>[]
          }
          create: {
            args: Prisma.ParcelaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParcelaPayload>
          }
          createMany: {
            args: Prisma.ParcelaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ParcelaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParcelaPayload>[]
          }
          delete: {
            args: Prisma.ParcelaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParcelaPayload>
          }
          update: {
            args: Prisma.ParcelaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParcelaPayload>
          }
          deleteMany: {
            args: Prisma.ParcelaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ParcelaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ParcelaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParcelaPayload>
          }
          aggregate: {
            args: Prisma.ParcelaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateParcela>
          }
          groupBy: {
            args: Prisma.ParcelaGroupByArgs<ExtArgs>
            result: $Utils.Optional<ParcelaGroupByOutputType>[]
          }
          count: {
            args: Prisma.ParcelaCountArgs<ExtArgs>
            result: $Utils.Optional<ParcelaCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsuarioCountOutputType
   */

  export type UsuarioCountOutputType = {
    gastos: number
    contasFixas: number
  }

  export type UsuarioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    gastos?: boolean | UsuarioCountOutputTypeCountGastosArgs
    contasFixas?: boolean | UsuarioCountOutputTypeCountContasFixasArgs
  }

  // Custom InputTypes
  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsuarioCountOutputType
     */
    select?: UsuarioCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountGastosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GastoWhereInput
  }

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeCountContasFixasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContaFixaWhereInput
  }


  /**
   * Count Type GastoCountOutputType
   */

  export type GastoCountOutputType = {
    parcelasGasto: number
  }

  export type GastoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parcelasGasto?: boolean | GastoCountOutputTypeCountParcelasGastoArgs
  }

  // Custom InputTypes
  /**
   * GastoCountOutputType without action
   */
  export type GastoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GastoCountOutputType
     */
    select?: GastoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GastoCountOutputType without action
   */
  export type GastoCountOutputTypeCountParcelasGastoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ParcelaWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Usuario
   */

  export type AggregateUsuario = {
    _count: UsuarioCountAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  export type UsuarioMinAggregateOutputType = {
    id: string | null
    nome: string | null
    email: string | null
    senha: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UsuarioMaxAggregateOutputType = {
    id: string | null
    nome: string | null
    email: string | null
    senha: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UsuarioCountAggregateOutputType = {
    id: number
    nome: number
    email: number
    senha: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UsuarioMinAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    senha?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UsuarioMaxAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    senha?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UsuarioCountAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    senha?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UsuarioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuario to aggregate.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Usuarios
    **/
    _count?: true | UsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioMaxAggregateInputType
  }

  export type GetUsuarioAggregateType<T extends UsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuario[P]>
      : GetScalarType<T[P], AggregateUsuario[P]>
  }




  export type UsuarioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsuarioWhereInput
    orderBy?: UsuarioOrderByWithAggregationInput | UsuarioOrderByWithAggregationInput[]
    by: UsuarioScalarFieldEnum[] | UsuarioScalarFieldEnum
    having?: UsuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioCountAggregateInputType | true
    _min?: UsuarioMinAggregateInputType
    _max?: UsuarioMaxAggregateInputType
  }

  export type UsuarioGroupByOutputType = {
    id: string
    nome: string
    email: string
    senha: string
    createdAt: Date
    updatedAt: Date
    _count: UsuarioCountAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  type GetUsuarioGroupByPayload<T extends UsuarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
        }
      >
    >


  export type UsuarioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    gastos?: boolean | Usuario$gastosArgs<ExtArgs>
    contasFixas?: boolean | Usuario$contasFixasArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["usuario"]>

  export type UsuarioSelectScalar = {
    id?: boolean
    nome?: boolean
    email?: boolean
    senha?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UsuarioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    gastos?: boolean | Usuario$gastosArgs<ExtArgs>
    contasFixas?: boolean | Usuario$contasFixasArgs<ExtArgs>
    _count?: boolean | UsuarioCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UsuarioIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UsuarioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Usuario"
    objects: {
      gastos: Prisma.$GastoPayload<ExtArgs>[]
      contasFixas: Prisma.$ContaFixaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nome: string
      email: string
      senha: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["usuario"]>
    composites: {}
  }

  type UsuarioGetPayload<S extends boolean | null | undefined | UsuarioDefaultArgs> = $Result.GetResult<Prisma.$UsuarioPayload, S>

  type UsuarioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UsuarioFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsuarioCountAggregateInputType | true
    }

  export interface UsuarioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Usuario'], meta: { name: 'Usuario' } }
    /**
     * Find zero or one Usuario that matches the filter.
     * @param {UsuarioFindUniqueArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsuarioFindUniqueArgs>(args: SelectSubset<T, UsuarioFindUniqueArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Usuario that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UsuarioFindUniqueOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsuarioFindUniqueOrThrowArgs>(args: SelectSubset<T, UsuarioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Usuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsuarioFindFirstArgs>(args?: SelectSubset<T, UsuarioFindFirstArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Usuario that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsuarioFindFirstOrThrowArgs>(args?: SelectSubset<T, UsuarioFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuario.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuario.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usuarioWithIdOnly = await prisma.usuario.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UsuarioFindManyArgs>(args?: SelectSubset<T, UsuarioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Usuario.
     * @param {UsuarioCreateArgs} args - Arguments to create a Usuario.
     * @example
     * // Create one Usuario
     * const Usuario = await prisma.usuario.create({
     *   data: {
     *     // ... data to create a Usuario
     *   }
     * })
     * 
     */
    create<T extends UsuarioCreateArgs>(args: SelectSubset<T, UsuarioCreateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Usuarios.
     * @param {UsuarioCreateManyArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsuarioCreateManyArgs>(args?: SelectSubset<T, UsuarioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Usuarios and returns the data saved in the database.
     * @param {UsuarioCreateManyAndReturnArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuario = await prisma.usuario.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Usuarios and only return the `id`
     * const usuarioWithIdOnly = await prisma.usuario.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UsuarioCreateManyAndReturnArgs>(args?: SelectSubset<T, UsuarioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Usuario.
     * @param {UsuarioDeleteArgs} args - Arguments to delete one Usuario.
     * @example
     * // Delete one Usuario
     * const Usuario = await prisma.usuario.delete({
     *   where: {
     *     // ... filter to delete one Usuario
     *   }
     * })
     * 
     */
    delete<T extends UsuarioDeleteArgs>(args: SelectSubset<T, UsuarioDeleteArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Usuario.
     * @param {UsuarioUpdateArgs} args - Arguments to update one Usuario.
     * @example
     * // Update one Usuario
     * const usuario = await prisma.usuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsuarioUpdateArgs>(args: SelectSubset<T, UsuarioUpdateArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Usuarios.
     * @param {UsuarioDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsuarioDeleteManyArgs>(args?: SelectSubset<T, UsuarioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsuarioUpdateManyArgs>(args: SelectSubset<T, UsuarioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Usuario.
     * @param {UsuarioUpsertArgs} args - Arguments to update or create a Usuario.
     * @example
     * // Update or create a Usuario
     * const usuario = await prisma.usuario.upsert({
     *   create: {
     *     // ... data to create a Usuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuario we want to update
     *   }
     * })
     */
    upsert<T extends UsuarioUpsertArgs>(args: SelectSubset<T, UsuarioUpsertArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuario.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends UsuarioCountArgs>(
      args?: Subset<T, UsuarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioAggregateArgs>(args: Subset<T, UsuarioAggregateArgs>): Prisma.PrismaPromise<GetUsuarioAggregateType<T>>

    /**
     * Group by Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuarioGroupByArgs['orderBy'] }
        : { orderBy?: UsuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Usuario model
   */
  readonly fields: UsuarioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Usuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsuarioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    gastos<T extends Usuario$gastosArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$gastosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GastoPayload<ExtArgs>, T, "findMany"> | Null>
    contasFixas<T extends Usuario$contasFixasArgs<ExtArgs> = {}>(args?: Subset<T, Usuario$contasFixasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContaFixaPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Usuario model
   */ 
  interface UsuarioFieldRefs {
    readonly id: FieldRef<"Usuario", 'String'>
    readonly nome: FieldRef<"Usuario", 'String'>
    readonly email: FieldRef<"Usuario", 'String'>
    readonly senha: FieldRef<"Usuario", 'String'>
    readonly createdAt: FieldRef<"Usuario", 'DateTime'>
    readonly updatedAt: FieldRef<"Usuario", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Usuario findUnique
   */
  export type UsuarioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findUniqueOrThrow
   */
  export type UsuarioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario findFirst
   */
  export type UsuarioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findFirstOrThrow
   */
  export type UsuarioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuario to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     */
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario findMany
   */
  export type UsuarioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter, which Usuarios to fetch.
     */
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     */
    orderBy?: UsuarioOrderByWithRelationInput | UsuarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Usuarios.
     */
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     */
    skip?: number
    distinct?: UsuarioScalarFieldEnum | UsuarioScalarFieldEnum[]
  }

  /**
   * Usuario create
   */
  export type UsuarioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to create a Usuario.
     */
    data: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
  }

  /**
   * Usuario createMany
   */
  export type UsuarioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Usuario createManyAndReturn
   */
  export type UsuarioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Usuarios.
     */
    data: UsuarioCreateManyInput | UsuarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Usuario update
   */
  export type UsuarioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The data needed to update a Usuario.
     */
    data: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
    /**
     * Choose, which Usuario to update.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario updateMany
   */
  export type UsuarioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Usuarios.
     */
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     */
    where?: UsuarioWhereInput
  }

  /**
   * Usuario upsert
   */
  export type UsuarioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * The filter to search for the Usuario to update in case it exists.
     */
    where: UsuarioWhereUniqueInput
    /**
     * In case the Usuario found by the `where` argument doesn't exist, create a new Usuario with this data.
     */
    create: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
    /**
     * In case the Usuario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
  }

  /**
   * Usuario delete
   */
  export type UsuarioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
    /**
     * Filter which Usuario to delete.
     */
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario deleteMany
   */
  export type UsuarioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Usuarios to delete
     */
    where?: UsuarioWhereInput
  }

  /**
   * Usuario.gastos
   */
  export type Usuario$gastosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gasto
     */
    select?: GastoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GastoInclude<ExtArgs> | null
    where?: GastoWhereInput
    orderBy?: GastoOrderByWithRelationInput | GastoOrderByWithRelationInput[]
    cursor?: GastoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GastoScalarFieldEnum | GastoScalarFieldEnum[]
  }

  /**
   * Usuario.contasFixas
   */
  export type Usuario$contasFixasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContaFixa
     */
    select?: ContaFixaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContaFixaInclude<ExtArgs> | null
    where?: ContaFixaWhereInput
    orderBy?: ContaFixaOrderByWithRelationInput | ContaFixaOrderByWithRelationInput[]
    cursor?: ContaFixaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContaFixaScalarFieldEnum | ContaFixaScalarFieldEnum[]
  }

  /**
   * Usuario without action
   */
  export type UsuarioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Usuario
     */
    select?: UsuarioSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsuarioInclude<ExtArgs> | null
  }


  /**
   * Model Gasto
   */

  export type AggregateGasto = {
    _count: GastoCountAggregateOutputType | null
    _avg: GastoAvgAggregateOutputType | null
    _sum: GastoSumAggregateOutputType | null
    _min: GastoMinAggregateOutputType | null
    _max: GastoMaxAggregateOutputType | null
  }

  export type GastoAvgAggregateOutputType = {
    valor: number | null
    parcelas: number | null
    parcelaAtual: number | null
  }

  export type GastoSumAggregateOutputType = {
    valor: number | null
    parcelas: number | null
    parcelaAtual: number | null
  }

  export type GastoMinAggregateOutputType = {
    id: string | null
    descricao: string | null
    valor: number | null
    dataVencimento: Date | null
    tipo: $Enums.TipoGasto | null
    parcelas: number | null
    parcelaAtual: number | null
    data: Date | null
    status: $Enums.StatusPagamento | null
    usuarioId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GastoMaxAggregateOutputType = {
    id: string | null
    descricao: string | null
    valor: number | null
    dataVencimento: Date | null
    tipo: $Enums.TipoGasto | null
    parcelas: number | null
    parcelaAtual: number | null
    data: Date | null
    status: $Enums.StatusPagamento | null
    usuarioId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GastoCountAggregateOutputType = {
    id: number
    descricao: number
    valor: number
    dataVencimento: number
    tipo: number
    parcelas: number
    parcelaAtual: number
    data: number
    status: number
    usuarioId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type GastoAvgAggregateInputType = {
    valor?: true
    parcelas?: true
    parcelaAtual?: true
  }

  export type GastoSumAggregateInputType = {
    valor?: true
    parcelas?: true
    parcelaAtual?: true
  }

  export type GastoMinAggregateInputType = {
    id?: true
    descricao?: true
    valor?: true
    dataVencimento?: true
    tipo?: true
    parcelas?: true
    parcelaAtual?: true
    data?: true
    status?: true
    usuarioId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GastoMaxAggregateInputType = {
    id?: true
    descricao?: true
    valor?: true
    dataVencimento?: true
    tipo?: true
    parcelas?: true
    parcelaAtual?: true
    data?: true
    status?: true
    usuarioId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GastoCountAggregateInputType = {
    id?: true
    descricao?: true
    valor?: true
    dataVencimento?: true
    tipo?: true
    parcelas?: true
    parcelaAtual?: true
    data?: true
    status?: true
    usuarioId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type GastoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Gasto to aggregate.
     */
    where?: GastoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Gastos to fetch.
     */
    orderBy?: GastoOrderByWithRelationInput | GastoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GastoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Gastos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Gastos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Gastos
    **/
    _count?: true | GastoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GastoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GastoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GastoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GastoMaxAggregateInputType
  }

  export type GetGastoAggregateType<T extends GastoAggregateArgs> = {
        [P in keyof T & keyof AggregateGasto]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGasto[P]>
      : GetScalarType<T[P], AggregateGasto[P]>
  }




  export type GastoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GastoWhereInput
    orderBy?: GastoOrderByWithAggregationInput | GastoOrderByWithAggregationInput[]
    by: GastoScalarFieldEnum[] | GastoScalarFieldEnum
    having?: GastoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GastoCountAggregateInputType | true
    _avg?: GastoAvgAggregateInputType
    _sum?: GastoSumAggregateInputType
    _min?: GastoMinAggregateInputType
    _max?: GastoMaxAggregateInputType
  }

  export type GastoGroupByOutputType = {
    id: string
    descricao: string
    valor: number
    dataVencimento: Date
    tipo: $Enums.TipoGasto
    parcelas: number
    parcelaAtual: number | null
    data: Date
    status: $Enums.StatusPagamento
    usuarioId: string
    createdAt: Date
    updatedAt: Date
    _count: GastoCountAggregateOutputType | null
    _avg: GastoAvgAggregateOutputType | null
    _sum: GastoSumAggregateOutputType | null
    _min: GastoMinAggregateOutputType | null
    _max: GastoMaxAggregateOutputType | null
  }

  type GetGastoGroupByPayload<T extends GastoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GastoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GastoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GastoGroupByOutputType[P]>
            : GetScalarType<T[P], GastoGroupByOutputType[P]>
        }
      >
    >


  export type GastoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    descricao?: boolean
    valor?: boolean
    dataVencimento?: boolean
    tipo?: boolean
    parcelas?: boolean
    parcelaAtual?: boolean
    data?: boolean
    status?: boolean
    usuarioId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    parcelasGasto?: boolean | Gasto$parcelasGastoArgs<ExtArgs>
    _count?: boolean | GastoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gasto"]>

  export type GastoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    descricao?: boolean
    valor?: boolean
    dataVencimento?: boolean
    tipo?: boolean
    parcelas?: boolean
    parcelaAtual?: boolean
    data?: boolean
    status?: boolean
    usuarioId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gasto"]>

  export type GastoSelectScalar = {
    id?: boolean
    descricao?: boolean
    valor?: boolean
    dataVencimento?: boolean
    tipo?: boolean
    parcelas?: boolean
    parcelaAtual?: boolean
    data?: boolean
    status?: boolean
    usuarioId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type GastoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
    parcelasGasto?: boolean | Gasto$parcelasGastoArgs<ExtArgs>
    _count?: boolean | GastoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GastoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }

  export type $GastoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Gasto"
    objects: {
      usuario: Prisma.$UsuarioPayload<ExtArgs>
      parcelasGasto: Prisma.$ParcelaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      descricao: string
      valor: number
      dataVencimento: Date
      tipo: $Enums.TipoGasto
      parcelas: number
      parcelaAtual: number | null
      data: Date
      status: $Enums.StatusPagamento
      usuarioId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["gasto"]>
    composites: {}
  }

  type GastoGetPayload<S extends boolean | null | undefined | GastoDefaultArgs> = $Result.GetResult<Prisma.$GastoPayload, S>

  type GastoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GastoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GastoCountAggregateInputType | true
    }

  export interface GastoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Gasto'], meta: { name: 'Gasto' } }
    /**
     * Find zero or one Gasto that matches the filter.
     * @param {GastoFindUniqueArgs} args - Arguments to find a Gasto
     * @example
     * // Get one Gasto
     * const gasto = await prisma.gasto.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GastoFindUniqueArgs>(args: SelectSubset<T, GastoFindUniqueArgs<ExtArgs>>): Prisma__GastoClient<$Result.GetResult<Prisma.$GastoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Gasto that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GastoFindUniqueOrThrowArgs} args - Arguments to find a Gasto
     * @example
     * // Get one Gasto
     * const gasto = await prisma.gasto.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GastoFindUniqueOrThrowArgs>(args: SelectSubset<T, GastoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GastoClient<$Result.GetResult<Prisma.$GastoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Gasto that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GastoFindFirstArgs} args - Arguments to find a Gasto
     * @example
     * // Get one Gasto
     * const gasto = await prisma.gasto.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GastoFindFirstArgs>(args?: SelectSubset<T, GastoFindFirstArgs<ExtArgs>>): Prisma__GastoClient<$Result.GetResult<Prisma.$GastoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Gasto that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GastoFindFirstOrThrowArgs} args - Arguments to find a Gasto
     * @example
     * // Get one Gasto
     * const gasto = await prisma.gasto.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GastoFindFirstOrThrowArgs>(args?: SelectSubset<T, GastoFindFirstOrThrowArgs<ExtArgs>>): Prisma__GastoClient<$Result.GetResult<Prisma.$GastoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Gastos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GastoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Gastos
     * const gastos = await prisma.gasto.findMany()
     * 
     * // Get first 10 Gastos
     * const gastos = await prisma.gasto.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gastoWithIdOnly = await prisma.gasto.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GastoFindManyArgs>(args?: SelectSubset<T, GastoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GastoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Gasto.
     * @param {GastoCreateArgs} args - Arguments to create a Gasto.
     * @example
     * // Create one Gasto
     * const Gasto = await prisma.gasto.create({
     *   data: {
     *     // ... data to create a Gasto
     *   }
     * })
     * 
     */
    create<T extends GastoCreateArgs>(args: SelectSubset<T, GastoCreateArgs<ExtArgs>>): Prisma__GastoClient<$Result.GetResult<Prisma.$GastoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Gastos.
     * @param {GastoCreateManyArgs} args - Arguments to create many Gastos.
     * @example
     * // Create many Gastos
     * const gasto = await prisma.gasto.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GastoCreateManyArgs>(args?: SelectSubset<T, GastoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Gastos and returns the data saved in the database.
     * @param {GastoCreateManyAndReturnArgs} args - Arguments to create many Gastos.
     * @example
     * // Create many Gastos
     * const gasto = await prisma.gasto.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Gastos and only return the `id`
     * const gastoWithIdOnly = await prisma.gasto.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GastoCreateManyAndReturnArgs>(args?: SelectSubset<T, GastoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GastoPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Gasto.
     * @param {GastoDeleteArgs} args - Arguments to delete one Gasto.
     * @example
     * // Delete one Gasto
     * const Gasto = await prisma.gasto.delete({
     *   where: {
     *     // ... filter to delete one Gasto
     *   }
     * })
     * 
     */
    delete<T extends GastoDeleteArgs>(args: SelectSubset<T, GastoDeleteArgs<ExtArgs>>): Prisma__GastoClient<$Result.GetResult<Prisma.$GastoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Gasto.
     * @param {GastoUpdateArgs} args - Arguments to update one Gasto.
     * @example
     * // Update one Gasto
     * const gasto = await prisma.gasto.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GastoUpdateArgs>(args: SelectSubset<T, GastoUpdateArgs<ExtArgs>>): Prisma__GastoClient<$Result.GetResult<Prisma.$GastoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Gastos.
     * @param {GastoDeleteManyArgs} args - Arguments to filter Gastos to delete.
     * @example
     * // Delete a few Gastos
     * const { count } = await prisma.gasto.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GastoDeleteManyArgs>(args?: SelectSubset<T, GastoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Gastos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GastoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Gastos
     * const gasto = await prisma.gasto.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GastoUpdateManyArgs>(args: SelectSubset<T, GastoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Gasto.
     * @param {GastoUpsertArgs} args - Arguments to update or create a Gasto.
     * @example
     * // Update or create a Gasto
     * const gasto = await prisma.gasto.upsert({
     *   create: {
     *     // ... data to create a Gasto
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Gasto we want to update
     *   }
     * })
     */
    upsert<T extends GastoUpsertArgs>(args: SelectSubset<T, GastoUpsertArgs<ExtArgs>>): Prisma__GastoClient<$Result.GetResult<Prisma.$GastoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Gastos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GastoCountArgs} args - Arguments to filter Gastos to count.
     * @example
     * // Count the number of Gastos
     * const count = await prisma.gasto.count({
     *   where: {
     *     // ... the filter for the Gastos we want to count
     *   }
     * })
    **/
    count<T extends GastoCountArgs>(
      args?: Subset<T, GastoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GastoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Gasto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GastoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GastoAggregateArgs>(args: Subset<T, GastoAggregateArgs>): Prisma.PrismaPromise<GetGastoAggregateType<T>>

    /**
     * Group by Gasto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GastoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GastoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GastoGroupByArgs['orderBy'] }
        : { orderBy?: GastoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GastoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGastoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Gasto model
   */
  readonly fields: GastoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Gasto.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GastoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    parcelasGasto<T extends Gasto$parcelasGastoArgs<ExtArgs> = {}>(args?: Subset<T, Gasto$parcelasGastoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParcelaPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Gasto model
   */ 
  interface GastoFieldRefs {
    readonly id: FieldRef<"Gasto", 'String'>
    readonly descricao: FieldRef<"Gasto", 'String'>
    readonly valor: FieldRef<"Gasto", 'Float'>
    readonly dataVencimento: FieldRef<"Gasto", 'DateTime'>
    readonly tipo: FieldRef<"Gasto", 'TipoGasto'>
    readonly parcelas: FieldRef<"Gasto", 'Int'>
    readonly parcelaAtual: FieldRef<"Gasto", 'Int'>
    readonly data: FieldRef<"Gasto", 'DateTime'>
    readonly status: FieldRef<"Gasto", 'StatusPagamento'>
    readonly usuarioId: FieldRef<"Gasto", 'String'>
    readonly createdAt: FieldRef<"Gasto", 'DateTime'>
    readonly updatedAt: FieldRef<"Gasto", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Gasto findUnique
   */
  export type GastoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gasto
     */
    select?: GastoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GastoInclude<ExtArgs> | null
    /**
     * Filter, which Gasto to fetch.
     */
    where: GastoWhereUniqueInput
  }

  /**
   * Gasto findUniqueOrThrow
   */
  export type GastoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gasto
     */
    select?: GastoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GastoInclude<ExtArgs> | null
    /**
     * Filter, which Gasto to fetch.
     */
    where: GastoWhereUniqueInput
  }

  /**
   * Gasto findFirst
   */
  export type GastoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gasto
     */
    select?: GastoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GastoInclude<ExtArgs> | null
    /**
     * Filter, which Gasto to fetch.
     */
    where?: GastoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Gastos to fetch.
     */
    orderBy?: GastoOrderByWithRelationInput | GastoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Gastos.
     */
    cursor?: GastoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Gastos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Gastos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Gastos.
     */
    distinct?: GastoScalarFieldEnum | GastoScalarFieldEnum[]
  }

  /**
   * Gasto findFirstOrThrow
   */
  export type GastoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gasto
     */
    select?: GastoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GastoInclude<ExtArgs> | null
    /**
     * Filter, which Gasto to fetch.
     */
    where?: GastoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Gastos to fetch.
     */
    orderBy?: GastoOrderByWithRelationInput | GastoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Gastos.
     */
    cursor?: GastoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Gastos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Gastos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Gastos.
     */
    distinct?: GastoScalarFieldEnum | GastoScalarFieldEnum[]
  }

  /**
   * Gasto findMany
   */
  export type GastoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gasto
     */
    select?: GastoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GastoInclude<ExtArgs> | null
    /**
     * Filter, which Gastos to fetch.
     */
    where?: GastoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Gastos to fetch.
     */
    orderBy?: GastoOrderByWithRelationInput | GastoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Gastos.
     */
    cursor?: GastoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Gastos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Gastos.
     */
    skip?: number
    distinct?: GastoScalarFieldEnum | GastoScalarFieldEnum[]
  }

  /**
   * Gasto create
   */
  export type GastoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gasto
     */
    select?: GastoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GastoInclude<ExtArgs> | null
    /**
     * The data needed to create a Gasto.
     */
    data: XOR<GastoCreateInput, GastoUncheckedCreateInput>
  }

  /**
   * Gasto createMany
   */
  export type GastoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Gastos.
     */
    data: GastoCreateManyInput | GastoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Gasto createManyAndReturn
   */
  export type GastoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gasto
     */
    select?: GastoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Gastos.
     */
    data: GastoCreateManyInput | GastoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GastoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Gasto update
   */
  export type GastoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gasto
     */
    select?: GastoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GastoInclude<ExtArgs> | null
    /**
     * The data needed to update a Gasto.
     */
    data: XOR<GastoUpdateInput, GastoUncheckedUpdateInput>
    /**
     * Choose, which Gasto to update.
     */
    where: GastoWhereUniqueInput
  }

  /**
   * Gasto updateMany
   */
  export type GastoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Gastos.
     */
    data: XOR<GastoUpdateManyMutationInput, GastoUncheckedUpdateManyInput>
    /**
     * Filter which Gastos to update
     */
    where?: GastoWhereInput
  }

  /**
   * Gasto upsert
   */
  export type GastoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gasto
     */
    select?: GastoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GastoInclude<ExtArgs> | null
    /**
     * The filter to search for the Gasto to update in case it exists.
     */
    where: GastoWhereUniqueInput
    /**
     * In case the Gasto found by the `where` argument doesn't exist, create a new Gasto with this data.
     */
    create: XOR<GastoCreateInput, GastoUncheckedCreateInput>
    /**
     * In case the Gasto was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GastoUpdateInput, GastoUncheckedUpdateInput>
  }

  /**
   * Gasto delete
   */
  export type GastoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gasto
     */
    select?: GastoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GastoInclude<ExtArgs> | null
    /**
     * Filter which Gasto to delete.
     */
    where: GastoWhereUniqueInput
  }

  /**
   * Gasto deleteMany
   */
  export type GastoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Gastos to delete
     */
    where?: GastoWhereInput
  }

  /**
   * Gasto.parcelasGasto
   */
  export type Gasto$parcelasGastoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parcela
     */
    select?: ParcelaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParcelaInclude<ExtArgs> | null
    where?: ParcelaWhereInput
    orderBy?: ParcelaOrderByWithRelationInput | ParcelaOrderByWithRelationInput[]
    cursor?: ParcelaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ParcelaScalarFieldEnum | ParcelaScalarFieldEnum[]
  }

  /**
   * Gasto without action
   */
  export type GastoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Gasto
     */
    select?: GastoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GastoInclude<ExtArgs> | null
  }


  /**
   * Model ContaFixa
   */

  export type AggregateContaFixa = {
    _count: ContaFixaCountAggregateOutputType | null
    _avg: ContaFixaAvgAggregateOutputType | null
    _sum: ContaFixaSumAggregateOutputType | null
    _min: ContaFixaMinAggregateOutputType | null
    _max: ContaFixaMaxAggregateOutputType | null
  }

  export type ContaFixaAvgAggregateOutputType = {
    valor: number | null
  }

  export type ContaFixaSumAggregateOutputType = {
    valor: number | null
  }

  export type ContaFixaMinAggregateOutputType = {
    id: string | null
    nome: string | null
    valor: number | null
    status: $Enums.StatusPagamento | null
    dataVencimento: Date | null
    usuarioId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ContaFixaMaxAggregateOutputType = {
    id: string | null
    nome: string | null
    valor: number | null
    status: $Enums.StatusPagamento | null
    dataVencimento: Date | null
    usuarioId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ContaFixaCountAggregateOutputType = {
    id: number
    nome: number
    valor: number
    status: number
    dataVencimento: number
    usuarioId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ContaFixaAvgAggregateInputType = {
    valor?: true
  }

  export type ContaFixaSumAggregateInputType = {
    valor?: true
  }

  export type ContaFixaMinAggregateInputType = {
    id?: true
    nome?: true
    valor?: true
    status?: true
    dataVencimento?: true
    usuarioId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ContaFixaMaxAggregateInputType = {
    id?: true
    nome?: true
    valor?: true
    status?: true
    dataVencimento?: true
    usuarioId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ContaFixaCountAggregateInputType = {
    id?: true
    nome?: true
    valor?: true
    status?: true
    dataVencimento?: true
    usuarioId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ContaFixaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContaFixa to aggregate.
     */
    where?: ContaFixaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContaFixas to fetch.
     */
    orderBy?: ContaFixaOrderByWithRelationInput | ContaFixaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContaFixaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContaFixas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContaFixas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ContaFixas
    **/
    _count?: true | ContaFixaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContaFixaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContaFixaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContaFixaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContaFixaMaxAggregateInputType
  }

  export type GetContaFixaAggregateType<T extends ContaFixaAggregateArgs> = {
        [P in keyof T & keyof AggregateContaFixa]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContaFixa[P]>
      : GetScalarType<T[P], AggregateContaFixa[P]>
  }




  export type ContaFixaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContaFixaWhereInput
    orderBy?: ContaFixaOrderByWithAggregationInput | ContaFixaOrderByWithAggregationInput[]
    by: ContaFixaScalarFieldEnum[] | ContaFixaScalarFieldEnum
    having?: ContaFixaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContaFixaCountAggregateInputType | true
    _avg?: ContaFixaAvgAggregateInputType
    _sum?: ContaFixaSumAggregateInputType
    _min?: ContaFixaMinAggregateInputType
    _max?: ContaFixaMaxAggregateInputType
  }

  export type ContaFixaGroupByOutputType = {
    id: string
    nome: string
    valor: number
    status: $Enums.StatusPagamento
    dataVencimento: Date
    usuarioId: string
    createdAt: Date
    updatedAt: Date
    _count: ContaFixaCountAggregateOutputType | null
    _avg: ContaFixaAvgAggregateOutputType | null
    _sum: ContaFixaSumAggregateOutputType | null
    _min: ContaFixaMinAggregateOutputType | null
    _max: ContaFixaMaxAggregateOutputType | null
  }

  type GetContaFixaGroupByPayload<T extends ContaFixaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContaFixaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContaFixaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContaFixaGroupByOutputType[P]>
            : GetScalarType<T[P], ContaFixaGroupByOutputType[P]>
        }
      >
    >


  export type ContaFixaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    valor?: boolean
    status?: boolean
    dataVencimento?: boolean
    usuarioId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contaFixa"]>

  export type ContaFixaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    valor?: boolean
    status?: boolean
    dataVencimento?: boolean
    usuarioId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contaFixa"]>

  export type ContaFixaSelectScalar = {
    id?: boolean
    nome?: boolean
    valor?: boolean
    status?: boolean
    dataVencimento?: boolean
    usuarioId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ContaFixaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }
  export type ContaFixaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    usuario?: boolean | UsuarioDefaultArgs<ExtArgs>
  }

  export type $ContaFixaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ContaFixa"
    objects: {
      usuario: Prisma.$UsuarioPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nome: string
      valor: number
      status: $Enums.StatusPagamento
      dataVencimento: Date
      usuarioId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["contaFixa"]>
    composites: {}
  }

  type ContaFixaGetPayload<S extends boolean | null | undefined | ContaFixaDefaultArgs> = $Result.GetResult<Prisma.$ContaFixaPayload, S>

  type ContaFixaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ContaFixaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ContaFixaCountAggregateInputType | true
    }

  export interface ContaFixaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ContaFixa'], meta: { name: 'ContaFixa' } }
    /**
     * Find zero or one ContaFixa that matches the filter.
     * @param {ContaFixaFindUniqueArgs} args - Arguments to find a ContaFixa
     * @example
     * // Get one ContaFixa
     * const contaFixa = await prisma.contaFixa.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContaFixaFindUniqueArgs>(args: SelectSubset<T, ContaFixaFindUniqueArgs<ExtArgs>>): Prisma__ContaFixaClient<$Result.GetResult<Prisma.$ContaFixaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ContaFixa that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ContaFixaFindUniqueOrThrowArgs} args - Arguments to find a ContaFixa
     * @example
     * // Get one ContaFixa
     * const contaFixa = await prisma.contaFixa.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContaFixaFindUniqueOrThrowArgs>(args: SelectSubset<T, ContaFixaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContaFixaClient<$Result.GetResult<Prisma.$ContaFixaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ContaFixa that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContaFixaFindFirstArgs} args - Arguments to find a ContaFixa
     * @example
     * // Get one ContaFixa
     * const contaFixa = await prisma.contaFixa.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContaFixaFindFirstArgs>(args?: SelectSubset<T, ContaFixaFindFirstArgs<ExtArgs>>): Prisma__ContaFixaClient<$Result.GetResult<Prisma.$ContaFixaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ContaFixa that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContaFixaFindFirstOrThrowArgs} args - Arguments to find a ContaFixa
     * @example
     * // Get one ContaFixa
     * const contaFixa = await prisma.contaFixa.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContaFixaFindFirstOrThrowArgs>(args?: SelectSubset<T, ContaFixaFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContaFixaClient<$Result.GetResult<Prisma.$ContaFixaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ContaFixas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContaFixaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ContaFixas
     * const contaFixas = await prisma.contaFixa.findMany()
     * 
     * // Get first 10 ContaFixas
     * const contaFixas = await prisma.contaFixa.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contaFixaWithIdOnly = await prisma.contaFixa.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContaFixaFindManyArgs>(args?: SelectSubset<T, ContaFixaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContaFixaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ContaFixa.
     * @param {ContaFixaCreateArgs} args - Arguments to create a ContaFixa.
     * @example
     * // Create one ContaFixa
     * const ContaFixa = await prisma.contaFixa.create({
     *   data: {
     *     // ... data to create a ContaFixa
     *   }
     * })
     * 
     */
    create<T extends ContaFixaCreateArgs>(args: SelectSubset<T, ContaFixaCreateArgs<ExtArgs>>): Prisma__ContaFixaClient<$Result.GetResult<Prisma.$ContaFixaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ContaFixas.
     * @param {ContaFixaCreateManyArgs} args - Arguments to create many ContaFixas.
     * @example
     * // Create many ContaFixas
     * const contaFixa = await prisma.contaFixa.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContaFixaCreateManyArgs>(args?: SelectSubset<T, ContaFixaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ContaFixas and returns the data saved in the database.
     * @param {ContaFixaCreateManyAndReturnArgs} args - Arguments to create many ContaFixas.
     * @example
     * // Create many ContaFixas
     * const contaFixa = await prisma.contaFixa.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ContaFixas and only return the `id`
     * const contaFixaWithIdOnly = await prisma.contaFixa.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContaFixaCreateManyAndReturnArgs>(args?: SelectSubset<T, ContaFixaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContaFixaPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ContaFixa.
     * @param {ContaFixaDeleteArgs} args - Arguments to delete one ContaFixa.
     * @example
     * // Delete one ContaFixa
     * const ContaFixa = await prisma.contaFixa.delete({
     *   where: {
     *     // ... filter to delete one ContaFixa
     *   }
     * })
     * 
     */
    delete<T extends ContaFixaDeleteArgs>(args: SelectSubset<T, ContaFixaDeleteArgs<ExtArgs>>): Prisma__ContaFixaClient<$Result.GetResult<Prisma.$ContaFixaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ContaFixa.
     * @param {ContaFixaUpdateArgs} args - Arguments to update one ContaFixa.
     * @example
     * // Update one ContaFixa
     * const contaFixa = await prisma.contaFixa.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContaFixaUpdateArgs>(args: SelectSubset<T, ContaFixaUpdateArgs<ExtArgs>>): Prisma__ContaFixaClient<$Result.GetResult<Prisma.$ContaFixaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ContaFixas.
     * @param {ContaFixaDeleteManyArgs} args - Arguments to filter ContaFixas to delete.
     * @example
     * // Delete a few ContaFixas
     * const { count } = await prisma.contaFixa.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContaFixaDeleteManyArgs>(args?: SelectSubset<T, ContaFixaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ContaFixas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContaFixaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ContaFixas
     * const contaFixa = await prisma.contaFixa.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContaFixaUpdateManyArgs>(args: SelectSubset<T, ContaFixaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ContaFixa.
     * @param {ContaFixaUpsertArgs} args - Arguments to update or create a ContaFixa.
     * @example
     * // Update or create a ContaFixa
     * const contaFixa = await prisma.contaFixa.upsert({
     *   create: {
     *     // ... data to create a ContaFixa
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ContaFixa we want to update
     *   }
     * })
     */
    upsert<T extends ContaFixaUpsertArgs>(args: SelectSubset<T, ContaFixaUpsertArgs<ExtArgs>>): Prisma__ContaFixaClient<$Result.GetResult<Prisma.$ContaFixaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ContaFixas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContaFixaCountArgs} args - Arguments to filter ContaFixas to count.
     * @example
     * // Count the number of ContaFixas
     * const count = await prisma.contaFixa.count({
     *   where: {
     *     // ... the filter for the ContaFixas we want to count
     *   }
     * })
    **/
    count<T extends ContaFixaCountArgs>(
      args?: Subset<T, ContaFixaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContaFixaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ContaFixa.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContaFixaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContaFixaAggregateArgs>(args: Subset<T, ContaFixaAggregateArgs>): Prisma.PrismaPromise<GetContaFixaAggregateType<T>>

    /**
     * Group by ContaFixa.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContaFixaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContaFixaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContaFixaGroupByArgs['orderBy'] }
        : { orderBy?: ContaFixaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContaFixaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContaFixaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ContaFixa model
   */
  readonly fields: ContaFixaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ContaFixa.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContaFixaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    usuario<T extends UsuarioDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsuarioDefaultArgs<ExtArgs>>): Prisma__UsuarioClient<$Result.GetResult<Prisma.$UsuarioPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ContaFixa model
   */ 
  interface ContaFixaFieldRefs {
    readonly id: FieldRef<"ContaFixa", 'String'>
    readonly nome: FieldRef<"ContaFixa", 'String'>
    readonly valor: FieldRef<"ContaFixa", 'Float'>
    readonly status: FieldRef<"ContaFixa", 'StatusPagamento'>
    readonly dataVencimento: FieldRef<"ContaFixa", 'DateTime'>
    readonly usuarioId: FieldRef<"ContaFixa", 'String'>
    readonly createdAt: FieldRef<"ContaFixa", 'DateTime'>
    readonly updatedAt: FieldRef<"ContaFixa", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ContaFixa findUnique
   */
  export type ContaFixaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContaFixa
     */
    select?: ContaFixaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContaFixaInclude<ExtArgs> | null
    /**
     * Filter, which ContaFixa to fetch.
     */
    where: ContaFixaWhereUniqueInput
  }

  /**
   * ContaFixa findUniqueOrThrow
   */
  export type ContaFixaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContaFixa
     */
    select?: ContaFixaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContaFixaInclude<ExtArgs> | null
    /**
     * Filter, which ContaFixa to fetch.
     */
    where: ContaFixaWhereUniqueInput
  }

  /**
   * ContaFixa findFirst
   */
  export type ContaFixaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContaFixa
     */
    select?: ContaFixaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContaFixaInclude<ExtArgs> | null
    /**
     * Filter, which ContaFixa to fetch.
     */
    where?: ContaFixaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContaFixas to fetch.
     */
    orderBy?: ContaFixaOrderByWithRelationInput | ContaFixaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContaFixas.
     */
    cursor?: ContaFixaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContaFixas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContaFixas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContaFixas.
     */
    distinct?: ContaFixaScalarFieldEnum | ContaFixaScalarFieldEnum[]
  }

  /**
   * ContaFixa findFirstOrThrow
   */
  export type ContaFixaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContaFixa
     */
    select?: ContaFixaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContaFixaInclude<ExtArgs> | null
    /**
     * Filter, which ContaFixa to fetch.
     */
    where?: ContaFixaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContaFixas to fetch.
     */
    orderBy?: ContaFixaOrderByWithRelationInput | ContaFixaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ContaFixas.
     */
    cursor?: ContaFixaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContaFixas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContaFixas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ContaFixas.
     */
    distinct?: ContaFixaScalarFieldEnum | ContaFixaScalarFieldEnum[]
  }

  /**
   * ContaFixa findMany
   */
  export type ContaFixaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContaFixa
     */
    select?: ContaFixaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContaFixaInclude<ExtArgs> | null
    /**
     * Filter, which ContaFixas to fetch.
     */
    where?: ContaFixaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ContaFixas to fetch.
     */
    orderBy?: ContaFixaOrderByWithRelationInput | ContaFixaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ContaFixas.
     */
    cursor?: ContaFixaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ContaFixas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ContaFixas.
     */
    skip?: number
    distinct?: ContaFixaScalarFieldEnum | ContaFixaScalarFieldEnum[]
  }

  /**
   * ContaFixa create
   */
  export type ContaFixaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContaFixa
     */
    select?: ContaFixaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContaFixaInclude<ExtArgs> | null
    /**
     * The data needed to create a ContaFixa.
     */
    data: XOR<ContaFixaCreateInput, ContaFixaUncheckedCreateInput>
  }

  /**
   * ContaFixa createMany
   */
  export type ContaFixaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ContaFixas.
     */
    data: ContaFixaCreateManyInput | ContaFixaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ContaFixa createManyAndReturn
   */
  export type ContaFixaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContaFixa
     */
    select?: ContaFixaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ContaFixas.
     */
    data: ContaFixaCreateManyInput | ContaFixaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContaFixaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ContaFixa update
   */
  export type ContaFixaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContaFixa
     */
    select?: ContaFixaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContaFixaInclude<ExtArgs> | null
    /**
     * The data needed to update a ContaFixa.
     */
    data: XOR<ContaFixaUpdateInput, ContaFixaUncheckedUpdateInput>
    /**
     * Choose, which ContaFixa to update.
     */
    where: ContaFixaWhereUniqueInput
  }

  /**
   * ContaFixa updateMany
   */
  export type ContaFixaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ContaFixas.
     */
    data: XOR<ContaFixaUpdateManyMutationInput, ContaFixaUncheckedUpdateManyInput>
    /**
     * Filter which ContaFixas to update
     */
    where?: ContaFixaWhereInput
  }

  /**
   * ContaFixa upsert
   */
  export type ContaFixaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContaFixa
     */
    select?: ContaFixaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContaFixaInclude<ExtArgs> | null
    /**
     * The filter to search for the ContaFixa to update in case it exists.
     */
    where: ContaFixaWhereUniqueInput
    /**
     * In case the ContaFixa found by the `where` argument doesn't exist, create a new ContaFixa with this data.
     */
    create: XOR<ContaFixaCreateInput, ContaFixaUncheckedCreateInput>
    /**
     * In case the ContaFixa was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContaFixaUpdateInput, ContaFixaUncheckedUpdateInput>
  }

  /**
   * ContaFixa delete
   */
  export type ContaFixaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContaFixa
     */
    select?: ContaFixaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContaFixaInclude<ExtArgs> | null
    /**
     * Filter which ContaFixa to delete.
     */
    where: ContaFixaWhereUniqueInput
  }

  /**
   * ContaFixa deleteMany
   */
  export type ContaFixaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ContaFixas to delete
     */
    where?: ContaFixaWhereInput
  }

  /**
   * ContaFixa without action
   */
  export type ContaFixaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContaFixa
     */
    select?: ContaFixaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContaFixaInclude<ExtArgs> | null
  }


  /**
   * Model Parcela
   */

  export type AggregateParcela = {
    _count: ParcelaCountAggregateOutputType | null
    _avg: ParcelaAvgAggregateOutputType | null
    _sum: ParcelaSumAggregateOutputType | null
    _min: ParcelaMinAggregateOutputType | null
    _max: ParcelaMaxAggregateOutputType | null
  }

  export type ParcelaAvgAggregateOutputType = {
    valor: number | null
    numeroParcela: number | null
    totalParcelas: number | null
  }

  export type ParcelaSumAggregateOutputType = {
    valor: number | null
    numeroParcela: number | null
    totalParcelas: number | null
  }

  export type ParcelaMinAggregateOutputType = {
    id: string | null
    descricao: string | null
    valor: number | null
    dataVencimento: Date | null
    numeroParcela: number | null
    totalParcelas: number | null
    status: $Enums.StatusPagamento | null
    idGastoPrincipal: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ParcelaMaxAggregateOutputType = {
    id: string | null
    descricao: string | null
    valor: number | null
    dataVencimento: Date | null
    numeroParcela: number | null
    totalParcelas: number | null
    status: $Enums.StatusPagamento | null
    idGastoPrincipal: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ParcelaCountAggregateOutputType = {
    id: number
    descricao: number
    valor: number
    dataVencimento: number
    numeroParcela: number
    totalParcelas: number
    status: number
    idGastoPrincipal: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ParcelaAvgAggregateInputType = {
    valor?: true
    numeroParcela?: true
    totalParcelas?: true
  }

  export type ParcelaSumAggregateInputType = {
    valor?: true
    numeroParcela?: true
    totalParcelas?: true
  }

  export type ParcelaMinAggregateInputType = {
    id?: true
    descricao?: true
    valor?: true
    dataVencimento?: true
    numeroParcela?: true
    totalParcelas?: true
    status?: true
    idGastoPrincipal?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ParcelaMaxAggregateInputType = {
    id?: true
    descricao?: true
    valor?: true
    dataVencimento?: true
    numeroParcela?: true
    totalParcelas?: true
    status?: true
    idGastoPrincipal?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ParcelaCountAggregateInputType = {
    id?: true
    descricao?: true
    valor?: true
    dataVencimento?: true
    numeroParcela?: true
    totalParcelas?: true
    status?: true
    idGastoPrincipal?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ParcelaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Parcela to aggregate.
     */
    where?: ParcelaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parcelas to fetch.
     */
    orderBy?: ParcelaOrderByWithRelationInput | ParcelaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ParcelaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parcelas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parcelas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Parcelas
    **/
    _count?: true | ParcelaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ParcelaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ParcelaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ParcelaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ParcelaMaxAggregateInputType
  }

  export type GetParcelaAggregateType<T extends ParcelaAggregateArgs> = {
        [P in keyof T & keyof AggregateParcela]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateParcela[P]>
      : GetScalarType<T[P], AggregateParcela[P]>
  }




  export type ParcelaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ParcelaWhereInput
    orderBy?: ParcelaOrderByWithAggregationInput | ParcelaOrderByWithAggregationInput[]
    by: ParcelaScalarFieldEnum[] | ParcelaScalarFieldEnum
    having?: ParcelaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ParcelaCountAggregateInputType | true
    _avg?: ParcelaAvgAggregateInputType
    _sum?: ParcelaSumAggregateInputType
    _min?: ParcelaMinAggregateInputType
    _max?: ParcelaMaxAggregateInputType
  }

  export type ParcelaGroupByOutputType = {
    id: string
    descricao: string
    valor: number
    dataVencimento: Date
    numeroParcela: number
    totalParcelas: number
    status: $Enums.StatusPagamento
    idGastoPrincipal: string
    createdAt: Date
    updatedAt: Date
    _count: ParcelaCountAggregateOutputType | null
    _avg: ParcelaAvgAggregateOutputType | null
    _sum: ParcelaSumAggregateOutputType | null
    _min: ParcelaMinAggregateOutputType | null
    _max: ParcelaMaxAggregateOutputType | null
  }

  type GetParcelaGroupByPayload<T extends ParcelaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ParcelaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ParcelaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ParcelaGroupByOutputType[P]>
            : GetScalarType<T[P], ParcelaGroupByOutputType[P]>
        }
      >
    >


  export type ParcelaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    descricao?: boolean
    valor?: boolean
    dataVencimento?: boolean
    numeroParcela?: boolean
    totalParcelas?: boolean
    status?: boolean
    idGastoPrincipal?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    gastoPrincipal?: boolean | GastoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["parcela"]>

  export type ParcelaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    descricao?: boolean
    valor?: boolean
    dataVencimento?: boolean
    numeroParcela?: boolean
    totalParcelas?: boolean
    status?: boolean
    idGastoPrincipal?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    gastoPrincipal?: boolean | GastoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["parcela"]>

  export type ParcelaSelectScalar = {
    id?: boolean
    descricao?: boolean
    valor?: boolean
    dataVencimento?: boolean
    numeroParcela?: boolean
    totalParcelas?: boolean
    status?: boolean
    idGastoPrincipal?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ParcelaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    gastoPrincipal?: boolean | GastoDefaultArgs<ExtArgs>
  }
  export type ParcelaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    gastoPrincipal?: boolean | GastoDefaultArgs<ExtArgs>
  }

  export type $ParcelaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Parcela"
    objects: {
      gastoPrincipal: Prisma.$GastoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      descricao: string
      valor: number
      dataVencimento: Date
      numeroParcela: number
      totalParcelas: number
      status: $Enums.StatusPagamento
      idGastoPrincipal: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["parcela"]>
    composites: {}
  }

  type ParcelaGetPayload<S extends boolean | null | undefined | ParcelaDefaultArgs> = $Result.GetResult<Prisma.$ParcelaPayload, S>

  type ParcelaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ParcelaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ParcelaCountAggregateInputType | true
    }

  export interface ParcelaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Parcela'], meta: { name: 'Parcela' } }
    /**
     * Find zero or one Parcela that matches the filter.
     * @param {ParcelaFindUniqueArgs} args - Arguments to find a Parcela
     * @example
     * // Get one Parcela
     * const parcela = await prisma.parcela.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ParcelaFindUniqueArgs>(args: SelectSubset<T, ParcelaFindUniqueArgs<ExtArgs>>): Prisma__ParcelaClient<$Result.GetResult<Prisma.$ParcelaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Parcela that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ParcelaFindUniqueOrThrowArgs} args - Arguments to find a Parcela
     * @example
     * // Get one Parcela
     * const parcela = await prisma.parcela.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ParcelaFindUniqueOrThrowArgs>(args: SelectSubset<T, ParcelaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ParcelaClient<$Result.GetResult<Prisma.$ParcelaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Parcela that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParcelaFindFirstArgs} args - Arguments to find a Parcela
     * @example
     * // Get one Parcela
     * const parcela = await prisma.parcela.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ParcelaFindFirstArgs>(args?: SelectSubset<T, ParcelaFindFirstArgs<ExtArgs>>): Prisma__ParcelaClient<$Result.GetResult<Prisma.$ParcelaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Parcela that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParcelaFindFirstOrThrowArgs} args - Arguments to find a Parcela
     * @example
     * // Get one Parcela
     * const parcela = await prisma.parcela.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ParcelaFindFirstOrThrowArgs>(args?: SelectSubset<T, ParcelaFindFirstOrThrowArgs<ExtArgs>>): Prisma__ParcelaClient<$Result.GetResult<Prisma.$ParcelaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Parcelas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParcelaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Parcelas
     * const parcelas = await prisma.parcela.findMany()
     * 
     * // Get first 10 Parcelas
     * const parcelas = await prisma.parcela.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const parcelaWithIdOnly = await prisma.parcela.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ParcelaFindManyArgs>(args?: SelectSubset<T, ParcelaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParcelaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Parcela.
     * @param {ParcelaCreateArgs} args - Arguments to create a Parcela.
     * @example
     * // Create one Parcela
     * const Parcela = await prisma.parcela.create({
     *   data: {
     *     // ... data to create a Parcela
     *   }
     * })
     * 
     */
    create<T extends ParcelaCreateArgs>(args: SelectSubset<T, ParcelaCreateArgs<ExtArgs>>): Prisma__ParcelaClient<$Result.GetResult<Prisma.$ParcelaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Parcelas.
     * @param {ParcelaCreateManyArgs} args - Arguments to create many Parcelas.
     * @example
     * // Create many Parcelas
     * const parcela = await prisma.parcela.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ParcelaCreateManyArgs>(args?: SelectSubset<T, ParcelaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Parcelas and returns the data saved in the database.
     * @param {ParcelaCreateManyAndReturnArgs} args - Arguments to create many Parcelas.
     * @example
     * // Create many Parcelas
     * const parcela = await prisma.parcela.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Parcelas and only return the `id`
     * const parcelaWithIdOnly = await prisma.parcela.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ParcelaCreateManyAndReturnArgs>(args?: SelectSubset<T, ParcelaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParcelaPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Parcela.
     * @param {ParcelaDeleteArgs} args - Arguments to delete one Parcela.
     * @example
     * // Delete one Parcela
     * const Parcela = await prisma.parcela.delete({
     *   where: {
     *     // ... filter to delete one Parcela
     *   }
     * })
     * 
     */
    delete<T extends ParcelaDeleteArgs>(args: SelectSubset<T, ParcelaDeleteArgs<ExtArgs>>): Prisma__ParcelaClient<$Result.GetResult<Prisma.$ParcelaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Parcela.
     * @param {ParcelaUpdateArgs} args - Arguments to update one Parcela.
     * @example
     * // Update one Parcela
     * const parcela = await prisma.parcela.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ParcelaUpdateArgs>(args: SelectSubset<T, ParcelaUpdateArgs<ExtArgs>>): Prisma__ParcelaClient<$Result.GetResult<Prisma.$ParcelaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Parcelas.
     * @param {ParcelaDeleteManyArgs} args - Arguments to filter Parcelas to delete.
     * @example
     * // Delete a few Parcelas
     * const { count } = await prisma.parcela.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ParcelaDeleteManyArgs>(args?: SelectSubset<T, ParcelaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Parcelas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParcelaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Parcelas
     * const parcela = await prisma.parcela.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ParcelaUpdateManyArgs>(args: SelectSubset<T, ParcelaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Parcela.
     * @param {ParcelaUpsertArgs} args - Arguments to update or create a Parcela.
     * @example
     * // Update or create a Parcela
     * const parcela = await prisma.parcela.upsert({
     *   create: {
     *     // ... data to create a Parcela
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Parcela we want to update
     *   }
     * })
     */
    upsert<T extends ParcelaUpsertArgs>(args: SelectSubset<T, ParcelaUpsertArgs<ExtArgs>>): Prisma__ParcelaClient<$Result.GetResult<Prisma.$ParcelaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Parcelas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParcelaCountArgs} args - Arguments to filter Parcelas to count.
     * @example
     * // Count the number of Parcelas
     * const count = await prisma.parcela.count({
     *   where: {
     *     // ... the filter for the Parcelas we want to count
     *   }
     * })
    **/
    count<T extends ParcelaCountArgs>(
      args?: Subset<T, ParcelaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ParcelaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Parcela.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParcelaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ParcelaAggregateArgs>(args: Subset<T, ParcelaAggregateArgs>): Prisma.PrismaPromise<GetParcelaAggregateType<T>>

    /**
     * Group by Parcela.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParcelaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ParcelaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ParcelaGroupByArgs['orderBy'] }
        : { orderBy?: ParcelaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ParcelaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetParcelaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Parcela model
   */
  readonly fields: ParcelaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Parcela.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ParcelaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    gastoPrincipal<T extends GastoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GastoDefaultArgs<ExtArgs>>): Prisma__GastoClient<$Result.GetResult<Prisma.$GastoPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Parcela model
   */ 
  interface ParcelaFieldRefs {
    readonly id: FieldRef<"Parcela", 'String'>
    readonly descricao: FieldRef<"Parcela", 'String'>
    readonly valor: FieldRef<"Parcela", 'Float'>
    readonly dataVencimento: FieldRef<"Parcela", 'DateTime'>
    readonly numeroParcela: FieldRef<"Parcela", 'Int'>
    readonly totalParcelas: FieldRef<"Parcela", 'Int'>
    readonly status: FieldRef<"Parcela", 'StatusPagamento'>
    readonly idGastoPrincipal: FieldRef<"Parcela", 'String'>
    readonly createdAt: FieldRef<"Parcela", 'DateTime'>
    readonly updatedAt: FieldRef<"Parcela", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Parcela findUnique
   */
  export type ParcelaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parcela
     */
    select?: ParcelaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParcelaInclude<ExtArgs> | null
    /**
     * Filter, which Parcela to fetch.
     */
    where: ParcelaWhereUniqueInput
  }

  /**
   * Parcela findUniqueOrThrow
   */
  export type ParcelaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parcela
     */
    select?: ParcelaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParcelaInclude<ExtArgs> | null
    /**
     * Filter, which Parcela to fetch.
     */
    where: ParcelaWhereUniqueInput
  }

  /**
   * Parcela findFirst
   */
  export type ParcelaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parcela
     */
    select?: ParcelaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParcelaInclude<ExtArgs> | null
    /**
     * Filter, which Parcela to fetch.
     */
    where?: ParcelaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parcelas to fetch.
     */
    orderBy?: ParcelaOrderByWithRelationInput | ParcelaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Parcelas.
     */
    cursor?: ParcelaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parcelas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parcelas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Parcelas.
     */
    distinct?: ParcelaScalarFieldEnum | ParcelaScalarFieldEnum[]
  }

  /**
   * Parcela findFirstOrThrow
   */
  export type ParcelaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parcela
     */
    select?: ParcelaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParcelaInclude<ExtArgs> | null
    /**
     * Filter, which Parcela to fetch.
     */
    where?: ParcelaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parcelas to fetch.
     */
    orderBy?: ParcelaOrderByWithRelationInput | ParcelaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Parcelas.
     */
    cursor?: ParcelaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parcelas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parcelas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Parcelas.
     */
    distinct?: ParcelaScalarFieldEnum | ParcelaScalarFieldEnum[]
  }

  /**
   * Parcela findMany
   */
  export type ParcelaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parcela
     */
    select?: ParcelaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParcelaInclude<ExtArgs> | null
    /**
     * Filter, which Parcelas to fetch.
     */
    where?: ParcelaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parcelas to fetch.
     */
    orderBy?: ParcelaOrderByWithRelationInput | ParcelaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Parcelas.
     */
    cursor?: ParcelaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parcelas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parcelas.
     */
    skip?: number
    distinct?: ParcelaScalarFieldEnum | ParcelaScalarFieldEnum[]
  }

  /**
   * Parcela create
   */
  export type ParcelaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parcela
     */
    select?: ParcelaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParcelaInclude<ExtArgs> | null
    /**
     * The data needed to create a Parcela.
     */
    data: XOR<ParcelaCreateInput, ParcelaUncheckedCreateInput>
  }

  /**
   * Parcela createMany
   */
  export type ParcelaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Parcelas.
     */
    data: ParcelaCreateManyInput | ParcelaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Parcela createManyAndReturn
   */
  export type ParcelaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parcela
     */
    select?: ParcelaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Parcelas.
     */
    data: ParcelaCreateManyInput | ParcelaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParcelaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Parcela update
   */
  export type ParcelaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parcela
     */
    select?: ParcelaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParcelaInclude<ExtArgs> | null
    /**
     * The data needed to update a Parcela.
     */
    data: XOR<ParcelaUpdateInput, ParcelaUncheckedUpdateInput>
    /**
     * Choose, which Parcela to update.
     */
    where: ParcelaWhereUniqueInput
  }

  /**
   * Parcela updateMany
   */
  export type ParcelaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Parcelas.
     */
    data: XOR<ParcelaUpdateManyMutationInput, ParcelaUncheckedUpdateManyInput>
    /**
     * Filter which Parcelas to update
     */
    where?: ParcelaWhereInput
  }

  /**
   * Parcela upsert
   */
  export type ParcelaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parcela
     */
    select?: ParcelaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParcelaInclude<ExtArgs> | null
    /**
     * The filter to search for the Parcela to update in case it exists.
     */
    where: ParcelaWhereUniqueInput
    /**
     * In case the Parcela found by the `where` argument doesn't exist, create a new Parcela with this data.
     */
    create: XOR<ParcelaCreateInput, ParcelaUncheckedCreateInput>
    /**
     * In case the Parcela was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ParcelaUpdateInput, ParcelaUncheckedUpdateInput>
  }

  /**
   * Parcela delete
   */
  export type ParcelaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parcela
     */
    select?: ParcelaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParcelaInclude<ExtArgs> | null
    /**
     * Filter which Parcela to delete.
     */
    where: ParcelaWhereUniqueInput
  }

  /**
   * Parcela deleteMany
   */
  export type ParcelaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Parcelas to delete
     */
    where?: ParcelaWhereInput
  }

  /**
   * Parcela without action
   */
  export type ParcelaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parcela
     */
    select?: ParcelaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParcelaInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsuarioScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    email: 'email',
    senha: 'senha',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UsuarioScalarFieldEnum = (typeof UsuarioScalarFieldEnum)[keyof typeof UsuarioScalarFieldEnum]


  export const GastoScalarFieldEnum: {
    id: 'id',
    descricao: 'descricao',
    valor: 'valor',
    dataVencimento: 'dataVencimento',
    tipo: 'tipo',
    parcelas: 'parcelas',
    parcelaAtual: 'parcelaAtual',
    data: 'data',
    status: 'status',
    usuarioId: 'usuarioId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type GastoScalarFieldEnum = (typeof GastoScalarFieldEnum)[keyof typeof GastoScalarFieldEnum]


  export const ContaFixaScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    valor: 'valor',
    status: 'status',
    dataVencimento: 'dataVencimento',
    usuarioId: 'usuarioId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ContaFixaScalarFieldEnum = (typeof ContaFixaScalarFieldEnum)[keyof typeof ContaFixaScalarFieldEnum]


  export const ParcelaScalarFieldEnum: {
    id: 'id',
    descricao: 'descricao',
    valor: 'valor',
    dataVencimento: 'dataVencimento',
    numeroParcela: 'numeroParcela',
    totalParcelas: 'totalParcelas',
    status: 'status',
    idGastoPrincipal: 'idGastoPrincipal',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ParcelaScalarFieldEnum = (typeof ParcelaScalarFieldEnum)[keyof typeof ParcelaScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'TipoGasto'
   */
  export type EnumTipoGastoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TipoGasto'>
    


  /**
   * Reference to a field of type 'TipoGasto[]'
   */
  export type ListEnumTipoGastoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TipoGasto[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'StatusPagamento'
   */
  export type EnumStatusPagamentoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatusPagamento'>
    


  /**
   * Reference to a field of type 'StatusPagamento[]'
   */
  export type ListEnumStatusPagamentoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatusPagamento[]'>
    
  /**
   * Deep Input Types
   */


  export type UsuarioWhereInput = {
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    id?: StringFilter<"Usuario"> | string
    nome?: StringFilter<"Usuario"> | string
    email?: StringFilter<"Usuario"> | string
    senha?: StringFilter<"Usuario"> | string
    createdAt?: DateTimeFilter<"Usuario"> | Date | string
    updatedAt?: DateTimeFilter<"Usuario"> | Date | string
    gastos?: GastoListRelationFilter
    contasFixas?: ContaFixaListRelationFilter
  }

  export type UsuarioOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    gastos?: GastoOrderByRelationAggregateInput
    contasFixas?: ContaFixaOrderByRelationAggregateInput
  }

  export type UsuarioWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UsuarioWhereInput | UsuarioWhereInput[]
    OR?: UsuarioWhereInput[]
    NOT?: UsuarioWhereInput | UsuarioWhereInput[]
    nome?: StringFilter<"Usuario"> | string
    senha?: StringFilter<"Usuario"> | string
    createdAt?: DateTimeFilter<"Usuario"> | Date | string
    updatedAt?: DateTimeFilter<"Usuario"> | Date | string
    gastos?: GastoListRelationFilter
    contasFixas?: ContaFixaListRelationFilter
  }, "id" | "email">

  export type UsuarioOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UsuarioCountOrderByAggregateInput
    _max?: UsuarioMaxOrderByAggregateInput
    _min?: UsuarioMinOrderByAggregateInput
  }

  export type UsuarioScalarWhereWithAggregatesInput = {
    AND?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    OR?: UsuarioScalarWhereWithAggregatesInput[]
    NOT?: UsuarioScalarWhereWithAggregatesInput | UsuarioScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Usuario"> | string
    nome?: StringWithAggregatesFilter<"Usuario"> | string
    email?: StringWithAggregatesFilter<"Usuario"> | string
    senha?: StringWithAggregatesFilter<"Usuario"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Usuario"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Usuario"> | Date | string
  }

  export type GastoWhereInput = {
    AND?: GastoWhereInput | GastoWhereInput[]
    OR?: GastoWhereInput[]
    NOT?: GastoWhereInput | GastoWhereInput[]
    id?: StringFilter<"Gasto"> | string
    descricao?: StringFilter<"Gasto"> | string
    valor?: FloatFilter<"Gasto"> | number
    dataVencimento?: DateTimeFilter<"Gasto"> | Date | string
    tipo?: EnumTipoGastoFilter<"Gasto"> | $Enums.TipoGasto
    parcelas?: IntFilter<"Gasto"> | number
    parcelaAtual?: IntNullableFilter<"Gasto"> | number | null
    data?: DateTimeFilter<"Gasto"> | Date | string
    status?: EnumStatusPagamentoFilter<"Gasto"> | $Enums.StatusPagamento
    usuarioId?: StringFilter<"Gasto"> | string
    createdAt?: DateTimeFilter<"Gasto"> | Date | string
    updatedAt?: DateTimeFilter<"Gasto"> | Date | string
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
    parcelasGasto?: ParcelaListRelationFilter
  }

  export type GastoOrderByWithRelationInput = {
    id?: SortOrder
    descricao?: SortOrder
    valor?: SortOrder
    dataVencimento?: SortOrder
    tipo?: SortOrder
    parcelas?: SortOrder
    parcelaAtual?: SortOrderInput | SortOrder
    data?: SortOrder
    status?: SortOrder
    usuarioId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    usuario?: UsuarioOrderByWithRelationInput
    parcelasGasto?: ParcelaOrderByRelationAggregateInput
  }

  export type GastoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GastoWhereInput | GastoWhereInput[]
    OR?: GastoWhereInput[]
    NOT?: GastoWhereInput | GastoWhereInput[]
    descricao?: StringFilter<"Gasto"> | string
    valor?: FloatFilter<"Gasto"> | number
    dataVencimento?: DateTimeFilter<"Gasto"> | Date | string
    tipo?: EnumTipoGastoFilter<"Gasto"> | $Enums.TipoGasto
    parcelas?: IntFilter<"Gasto"> | number
    parcelaAtual?: IntNullableFilter<"Gasto"> | number | null
    data?: DateTimeFilter<"Gasto"> | Date | string
    status?: EnumStatusPagamentoFilter<"Gasto"> | $Enums.StatusPagamento
    usuarioId?: StringFilter<"Gasto"> | string
    createdAt?: DateTimeFilter<"Gasto"> | Date | string
    updatedAt?: DateTimeFilter<"Gasto"> | Date | string
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
    parcelasGasto?: ParcelaListRelationFilter
  }, "id">

  export type GastoOrderByWithAggregationInput = {
    id?: SortOrder
    descricao?: SortOrder
    valor?: SortOrder
    dataVencimento?: SortOrder
    tipo?: SortOrder
    parcelas?: SortOrder
    parcelaAtual?: SortOrderInput | SortOrder
    data?: SortOrder
    status?: SortOrder
    usuarioId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: GastoCountOrderByAggregateInput
    _avg?: GastoAvgOrderByAggregateInput
    _max?: GastoMaxOrderByAggregateInput
    _min?: GastoMinOrderByAggregateInput
    _sum?: GastoSumOrderByAggregateInput
  }

  export type GastoScalarWhereWithAggregatesInput = {
    AND?: GastoScalarWhereWithAggregatesInput | GastoScalarWhereWithAggregatesInput[]
    OR?: GastoScalarWhereWithAggregatesInput[]
    NOT?: GastoScalarWhereWithAggregatesInput | GastoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Gasto"> | string
    descricao?: StringWithAggregatesFilter<"Gasto"> | string
    valor?: FloatWithAggregatesFilter<"Gasto"> | number
    dataVencimento?: DateTimeWithAggregatesFilter<"Gasto"> | Date | string
    tipo?: EnumTipoGastoWithAggregatesFilter<"Gasto"> | $Enums.TipoGasto
    parcelas?: IntWithAggregatesFilter<"Gasto"> | number
    parcelaAtual?: IntNullableWithAggregatesFilter<"Gasto"> | number | null
    data?: DateTimeWithAggregatesFilter<"Gasto"> | Date | string
    status?: EnumStatusPagamentoWithAggregatesFilter<"Gasto"> | $Enums.StatusPagamento
    usuarioId?: StringWithAggregatesFilter<"Gasto"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Gasto"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Gasto"> | Date | string
  }

  export type ContaFixaWhereInput = {
    AND?: ContaFixaWhereInput | ContaFixaWhereInput[]
    OR?: ContaFixaWhereInput[]
    NOT?: ContaFixaWhereInput | ContaFixaWhereInput[]
    id?: StringFilter<"ContaFixa"> | string
    nome?: StringFilter<"ContaFixa"> | string
    valor?: FloatFilter<"ContaFixa"> | number
    status?: EnumStatusPagamentoFilter<"ContaFixa"> | $Enums.StatusPagamento
    dataVencimento?: DateTimeFilter<"ContaFixa"> | Date | string
    usuarioId?: StringFilter<"ContaFixa"> | string
    createdAt?: DateTimeFilter<"ContaFixa"> | Date | string
    updatedAt?: DateTimeFilter<"ContaFixa"> | Date | string
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }

  export type ContaFixaOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    valor?: SortOrder
    status?: SortOrder
    dataVencimento?: SortOrder
    usuarioId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    usuario?: UsuarioOrderByWithRelationInput
  }

  export type ContaFixaWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ContaFixaWhereInput | ContaFixaWhereInput[]
    OR?: ContaFixaWhereInput[]
    NOT?: ContaFixaWhereInput | ContaFixaWhereInput[]
    nome?: StringFilter<"ContaFixa"> | string
    valor?: FloatFilter<"ContaFixa"> | number
    status?: EnumStatusPagamentoFilter<"ContaFixa"> | $Enums.StatusPagamento
    dataVencimento?: DateTimeFilter<"ContaFixa"> | Date | string
    usuarioId?: StringFilter<"ContaFixa"> | string
    createdAt?: DateTimeFilter<"ContaFixa"> | Date | string
    updatedAt?: DateTimeFilter<"ContaFixa"> | Date | string
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
  }, "id">

  export type ContaFixaOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    valor?: SortOrder
    status?: SortOrder
    dataVencimento?: SortOrder
    usuarioId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ContaFixaCountOrderByAggregateInput
    _avg?: ContaFixaAvgOrderByAggregateInput
    _max?: ContaFixaMaxOrderByAggregateInput
    _min?: ContaFixaMinOrderByAggregateInput
    _sum?: ContaFixaSumOrderByAggregateInput
  }

  export type ContaFixaScalarWhereWithAggregatesInput = {
    AND?: ContaFixaScalarWhereWithAggregatesInput | ContaFixaScalarWhereWithAggregatesInput[]
    OR?: ContaFixaScalarWhereWithAggregatesInput[]
    NOT?: ContaFixaScalarWhereWithAggregatesInput | ContaFixaScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ContaFixa"> | string
    nome?: StringWithAggregatesFilter<"ContaFixa"> | string
    valor?: FloatWithAggregatesFilter<"ContaFixa"> | number
    status?: EnumStatusPagamentoWithAggregatesFilter<"ContaFixa"> | $Enums.StatusPagamento
    dataVencimento?: DateTimeWithAggregatesFilter<"ContaFixa"> | Date | string
    usuarioId?: StringWithAggregatesFilter<"ContaFixa"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ContaFixa"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ContaFixa"> | Date | string
  }

  export type ParcelaWhereInput = {
    AND?: ParcelaWhereInput | ParcelaWhereInput[]
    OR?: ParcelaWhereInput[]
    NOT?: ParcelaWhereInput | ParcelaWhereInput[]
    id?: StringFilter<"Parcela"> | string
    descricao?: StringFilter<"Parcela"> | string
    valor?: FloatFilter<"Parcela"> | number
    dataVencimento?: DateTimeFilter<"Parcela"> | Date | string
    numeroParcela?: IntFilter<"Parcela"> | number
    totalParcelas?: IntFilter<"Parcela"> | number
    status?: EnumStatusPagamentoFilter<"Parcela"> | $Enums.StatusPagamento
    idGastoPrincipal?: StringFilter<"Parcela"> | string
    createdAt?: DateTimeFilter<"Parcela"> | Date | string
    updatedAt?: DateTimeFilter<"Parcela"> | Date | string
    gastoPrincipal?: XOR<GastoRelationFilter, GastoWhereInput>
  }

  export type ParcelaOrderByWithRelationInput = {
    id?: SortOrder
    descricao?: SortOrder
    valor?: SortOrder
    dataVencimento?: SortOrder
    numeroParcela?: SortOrder
    totalParcelas?: SortOrder
    status?: SortOrder
    idGastoPrincipal?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    gastoPrincipal?: GastoOrderByWithRelationInput
  }

  export type ParcelaWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ParcelaWhereInput | ParcelaWhereInput[]
    OR?: ParcelaWhereInput[]
    NOT?: ParcelaWhereInput | ParcelaWhereInput[]
    descricao?: StringFilter<"Parcela"> | string
    valor?: FloatFilter<"Parcela"> | number
    dataVencimento?: DateTimeFilter<"Parcela"> | Date | string
    numeroParcela?: IntFilter<"Parcela"> | number
    totalParcelas?: IntFilter<"Parcela"> | number
    status?: EnumStatusPagamentoFilter<"Parcela"> | $Enums.StatusPagamento
    idGastoPrincipal?: StringFilter<"Parcela"> | string
    createdAt?: DateTimeFilter<"Parcela"> | Date | string
    updatedAt?: DateTimeFilter<"Parcela"> | Date | string
    gastoPrincipal?: XOR<GastoRelationFilter, GastoWhereInput>
  }, "id">

  export type ParcelaOrderByWithAggregationInput = {
    id?: SortOrder
    descricao?: SortOrder
    valor?: SortOrder
    dataVencimento?: SortOrder
    numeroParcela?: SortOrder
    totalParcelas?: SortOrder
    status?: SortOrder
    idGastoPrincipal?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ParcelaCountOrderByAggregateInput
    _avg?: ParcelaAvgOrderByAggregateInput
    _max?: ParcelaMaxOrderByAggregateInput
    _min?: ParcelaMinOrderByAggregateInput
    _sum?: ParcelaSumOrderByAggregateInput
  }

  export type ParcelaScalarWhereWithAggregatesInput = {
    AND?: ParcelaScalarWhereWithAggregatesInput | ParcelaScalarWhereWithAggregatesInput[]
    OR?: ParcelaScalarWhereWithAggregatesInput[]
    NOT?: ParcelaScalarWhereWithAggregatesInput | ParcelaScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Parcela"> | string
    descricao?: StringWithAggregatesFilter<"Parcela"> | string
    valor?: FloatWithAggregatesFilter<"Parcela"> | number
    dataVencimento?: DateTimeWithAggregatesFilter<"Parcela"> | Date | string
    numeroParcela?: IntWithAggregatesFilter<"Parcela"> | number
    totalParcelas?: IntWithAggregatesFilter<"Parcela"> | number
    status?: EnumStatusPagamentoWithAggregatesFilter<"Parcela"> | $Enums.StatusPagamento
    idGastoPrincipal?: StringWithAggregatesFilter<"Parcela"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Parcela"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Parcela"> | Date | string
  }

  export type UsuarioCreateInput = {
    id?: string
    nome: string
    email: string
    senha: string
    createdAt?: Date | string
    updatedAt?: Date | string
    gastos?: GastoCreateNestedManyWithoutUsuarioInput
    contasFixas?: ContaFixaCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateInput = {
    id?: string
    nome: string
    email: string
    senha: string
    createdAt?: Date | string
    updatedAt?: Date | string
    gastos?: GastoUncheckedCreateNestedManyWithoutUsuarioInput
    contasFixas?: ContaFixaUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gastos?: GastoUpdateManyWithoutUsuarioNestedInput
    contasFixas?: ContaFixaUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gastos?: GastoUncheckedUpdateManyWithoutUsuarioNestedInput
    contasFixas?: ContaFixaUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioCreateManyInput = {
    id?: string
    nome: string
    email: string
    senha: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UsuarioUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsuarioUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GastoCreateInput = {
    id?: string
    descricao: string
    valor: number
    dataVencimento: Date | string
    tipo: $Enums.TipoGasto
    parcelas?: number
    parcelaAtual?: number | null
    data?: Date | string
    status?: $Enums.StatusPagamento
    createdAt?: Date | string
    updatedAt?: Date | string
    usuario: UsuarioCreateNestedOneWithoutGastosInput
    parcelasGasto?: ParcelaCreateNestedManyWithoutGastoPrincipalInput
  }

  export type GastoUncheckedCreateInput = {
    id?: string
    descricao: string
    valor: number
    dataVencimento: Date | string
    tipo: $Enums.TipoGasto
    parcelas?: number
    parcelaAtual?: number | null
    data?: Date | string
    status?: $Enums.StatusPagamento
    usuarioId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    parcelasGasto?: ParcelaUncheckedCreateNestedManyWithoutGastoPrincipalInput
  }

  export type GastoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    tipo?: EnumTipoGastoFieldUpdateOperationsInput | $Enums.TipoGasto
    parcelas?: IntFieldUpdateOperationsInput | number
    parcelaAtual?: NullableIntFieldUpdateOperationsInput | number | null
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusPagamentoFieldUpdateOperationsInput | $Enums.StatusPagamento
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario?: UsuarioUpdateOneRequiredWithoutGastosNestedInput
    parcelasGasto?: ParcelaUpdateManyWithoutGastoPrincipalNestedInput
  }

  export type GastoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    tipo?: EnumTipoGastoFieldUpdateOperationsInput | $Enums.TipoGasto
    parcelas?: IntFieldUpdateOperationsInput | number
    parcelaAtual?: NullableIntFieldUpdateOperationsInput | number | null
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusPagamentoFieldUpdateOperationsInput | $Enums.StatusPagamento
    usuarioId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parcelasGasto?: ParcelaUncheckedUpdateManyWithoutGastoPrincipalNestedInput
  }

  export type GastoCreateManyInput = {
    id?: string
    descricao: string
    valor: number
    dataVencimento: Date | string
    tipo: $Enums.TipoGasto
    parcelas?: number
    parcelaAtual?: number | null
    data?: Date | string
    status?: $Enums.StatusPagamento
    usuarioId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GastoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    tipo?: EnumTipoGastoFieldUpdateOperationsInput | $Enums.TipoGasto
    parcelas?: IntFieldUpdateOperationsInput | number
    parcelaAtual?: NullableIntFieldUpdateOperationsInput | number | null
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusPagamentoFieldUpdateOperationsInput | $Enums.StatusPagamento
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GastoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    tipo?: EnumTipoGastoFieldUpdateOperationsInput | $Enums.TipoGasto
    parcelas?: IntFieldUpdateOperationsInput | number
    parcelaAtual?: NullableIntFieldUpdateOperationsInput | number | null
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusPagamentoFieldUpdateOperationsInput | $Enums.StatusPagamento
    usuarioId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContaFixaCreateInput = {
    id?: string
    nome: string
    valor: number
    status?: $Enums.StatusPagamento
    dataVencimento: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    usuario: UsuarioCreateNestedOneWithoutContasFixasInput
  }

  export type ContaFixaUncheckedCreateInput = {
    id?: string
    nome: string
    valor: number
    status?: $Enums.StatusPagamento
    dataVencimento: Date | string
    usuarioId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContaFixaUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    status?: EnumStatusPagamentoFieldUpdateOperationsInput | $Enums.StatusPagamento
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario?: UsuarioUpdateOneRequiredWithoutContasFixasNestedInput
  }

  export type ContaFixaUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    status?: EnumStatusPagamentoFieldUpdateOperationsInput | $Enums.StatusPagamento
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    usuarioId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContaFixaCreateManyInput = {
    id?: string
    nome: string
    valor: number
    status?: $Enums.StatusPagamento
    dataVencimento: Date | string
    usuarioId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContaFixaUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    status?: EnumStatusPagamentoFieldUpdateOperationsInput | $Enums.StatusPagamento
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContaFixaUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    status?: EnumStatusPagamentoFieldUpdateOperationsInput | $Enums.StatusPagamento
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    usuarioId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParcelaCreateInput = {
    id?: string
    descricao: string
    valor: number
    dataVencimento: Date | string
    numeroParcela: number
    totalParcelas: number
    status?: $Enums.StatusPagamento
    createdAt?: Date | string
    updatedAt?: Date | string
    gastoPrincipal: GastoCreateNestedOneWithoutParcelasGastoInput
  }

  export type ParcelaUncheckedCreateInput = {
    id?: string
    descricao: string
    valor: number
    dataVencimento: Date | string
    numeroParcela: number
    totalParcelas: number
    status?: $Enums.StatusPagamento
    idGastoPrincipal: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ParcelaUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    numeroParcela?: IntFieldUpdateOperationsInput | number
    totalParcelas?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusPagamentoFieldUpdateOperationsInput | $Enums.StatusPagamento
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gastoPrincipal?: GastoUpdateOneRequiredWithoutParcelasGastoNestedInput
  }

  export type ParcelaUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    numeroParcela?: IntFieldUpdateOperationsInput | number
    totalParcelas?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusPagamentoFieldUpdateOperationsInput | $Enums.StatusPagamento
    idGastoPrincipal?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParcelaCreateManyInput = {
    id?: string
    descricao: string
    valor: number
    dataVencimento: Date | string
    numeroParcela: number
    totalParcelas: number
    status?: $Enums.StatusPagamento
    idGastoPrincipal: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ParcelaUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    numeroParcela?: IntFieldUpdateOperationsInput | number
    totalParcelas?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusPagamentoFieldUpdateOperationsInput | $Enums.StatusPagamento
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParcelaUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    numeroParcela?: IntFieldUpdateOperationsInput | number
    totalParcelas?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusPagamentoFieldUpdateOperationsInput | $Enums.StatusPagamento
    idGastoPrincipal?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type GastoListRelationFilter = {
    every?: GastoWhereInput
    some?: GastoWhereInput
    none?: GastoWhereInput
  }

  export type ContaFixaListRelationFilter = {
    every?: ContaFixaWhereInput
    some?: ContaFixaWhereInput
    none?: ContaFixaWhereInput
  }

  export type GastoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ContaFixaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsuarioCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UsuarioMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UsuarioMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type EnumTipoGastoFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoGasto | EnumTipoGastoFieldRefInput<$PrismaModel>
    in?: $Enums.TipoGasto[] | ListEnumTipoGastoFieldRefInput<$PrismaModel>
    notIn?: $Enums.TipoGasto[] | ListEnumTipoGastoFieldRefInput<$PrismaModel>
    not?: NestedEnumTipoGastoFilter<$PrismaModel> | $Enums.TipoGasto
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type EnumStatusPagamentoFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusPagamento | EnumStatusPagamentoFieldRefInput<$PrismaModel>
    in?: $Enums.StatusPagamento[] | ListEnumStatusPagamentoFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusPagamento[] | ListEnumStatusPagamentoFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusPagamentoFilter<$PrismaModel> | $Enums.StatusPagamento
  }

  export type UsuarioRelationFilter = {
    is?: UsuarioWhereInput
    isNot?: UsuarioWhereInput
  }

  export type ParcelaListRelationFilter = {
    every?: ParcelaWhereInput
    some?: ParcelaWhereInput
    none?: ParcelaWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ParcelaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GastoCountOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
    valor?: SortOrder
    dataVencimento?: SortOrder
    tipo?: SortOrder
    parcelas?: SortOrder
    parcelaAtual?: SortOrder
    data?: SortOrder
    status?: SortOrder
    usuarioId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GastoAvgOrderByAggregateInput = {
    valor?: SortOrder
    parcelas?: SortOrder
    parcelaAtual?: SortOrder
  }

  export type GastoMaxOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
    valor?: SortOrder
    dataVencimento?: SortOrder
    tipo?: SortOrder
    parcelas?: SortOrder
    parcelaAtual?: SortOrder
    data?: SortOrder
    status?: SortOrder
    usuarioId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GastoMinOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
    valor?: SortOrder
    dataVencimento?: SortOrder
    tipo?: SortOrder
    parcelas?: SortOrder
    parcelaAtual?: SortOrder
    data?: SortOrder
    status?: SortOrder
    usuarioId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GastoSumOrderByAggregateInput = {
    valor?: SortOrder
    parcelas?: SortOrder
    parcelaAtual?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EnumTipoGastoWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoGasto | EnumTipoGastoFieldRefInput<$PrismaModel>
    in?: $Enums.TipoGasto[] | ListEnumTipoGastoFieldRefInput<$PrismaModel>
    notIn?: $Enums.TipoGasto[] | ListEnumTipoGastoFieldRefInput<$PrismaModel>
    not?: NestedEnumTipoGastoWithAggregatesFilter<$PrismaModel> | $Enums.TipoGasto
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTipoGastoFilter<$PrismaModel>
    _max?: NestedEnumTipoGastoFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumStatusPagamentoWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusPagamento | EnumStatusPagamentoFieldRefInput<$PrismaModel>
    in?: $Enums.StatusPagamento[] | ListEnumStatusPagamentoFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusPagamento[] | ListEnumStatusPagamentoFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusPagamentoWithAggregatesFilter<$PrismaModel> | $Enums.StatusPagamento
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusPagamentoFilter<$PrismaModel>
    _max?: NestedEnumStatusPagamentoFilter<$PrismaModel>
  }

  export type ContaFixaCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    valor?: SortOrder
    status?: SortOrder
    dataVencimento?: SortOrder
    usuarioId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContaFixaAvgOrderByAggregateInput = {
    valor?: SortOrder
  }

  export type ContaFixaMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    valor?: SortOrder
    status?: SortOrder
    dataVencimento?: SortOrder
    usuarioId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContaFixaMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    valor?: SortOrder
    status?: SortOrder
    dataVencimento?: SortOrder
    usuarioId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ContaFixaSumOrderByAggregateInput = {
    valor?: SortOrder
  }

  export type GastoRelationFilter = {
    is?: GastoWhereInput
    isNot?: GastoWhereInput
  }

  export type ParcelaCountOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
    valor?: SortOrder
    dataVencimento?: SortOrder
    numeroParcela?: SortOrder
    totalParcelas?: SortOrder
    status?: SortOrder
    idGastoPrincipal?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ParcelaAvgOrderByAggregateInput = {
    valor?: SortOrder
    numeroParcela?: SortOrder
    totalParcelas?: SortOrder
  }

  export type ParcelaMaxOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
    valor?: SortOrder
    dataVencimento?: SortOrder
    numeroParcela?: SortOrder
    totalParcelas?: SortOrder
    status?: SortOrder
    idGastoPrincipal?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ParcelaMinOrderByAggregateInput = {
    id?: SortOrder
    descricao?: SortOrder
    valor?: SortOrder
    dataVencimento?: SortOrder
    numeroParcela?: SortOrder
    totalParcelas?: SortOrder
    status?: SortOrder
    idGastoPrincipal?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ParcelaSumOrderByAggregateInput = {
    valor?: SortOrder
    numeroParcela?: SortOrder
    totalParcelas?: SortOrder
  }

  export type GastoCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<GastoCreateWithoutUsuarioInput, GastoUncheckedCreateWithoutUsuarioInput> | GastoCreateWithoutUsuarioInput[] | GastoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: GastoCreateOrConnectWithoutUsuarioInput | GastoCreateOrConnectWithoutUsuarioInput[]
    createMany?: GastoCreateManyUsuarioInputEnvelope
    connect?: GastoWhereUniqueInput | GastoWhereUniqueInput[]
  }

  export type ContaFixaCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<ContaFixaCreateWithoutUsuarioInput, ContaFixaUncheckedCreateWithoutUsuarioInput> | ContaFixaCreateWithoutUsuarioInput[] | ContaFixaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: ContaFixaCreateOrConnectWithoutUsuarioInput | ContaFixaCreateOrConnectWithoutUsuarioInput[]
    createMany?: ContaFixaCreateManyUsuarioInputEnvelope
    connect?: ContaFixaWhereUniqueInput | ContaFixaWhereUniqueInput[]
  }

  export type GastoUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<GastoCreateWithoutUsuarioInput, GastoUncheckedCreateWithoutUsuarioInput> | GastoCreateWithoutUsuarioInput[] | GastoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: GastoCreateOrConnectWithoutUsuarioInput | GastoCreateOrConnectWithoutUsuarioInput[]
    createMany?: GastoCreateManyUsuarioInputEnvelope
    connect?: GastoWhereUniqueInput | GastoWhereUniqueInput[]
  }

  export type ContaFixaUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<ContaFixaCreateWithoutUsuarioInput, ContaFixaUncheckedCreateWithoutUsuarioInput> | ContaFixaCreateWithoutUsuarioInput[] | ContaFixaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: ContaFixaCreateOrConnectWithoutUsuarioInput | ContaFixaCreateOrConnectWithoutUsuarioInput[]
    createMany?: ContaFixaCreateManyUsuarioInputEnvelope
    connect?: ContaFixaWhereUniqueInput | ContaFixaWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type GastoUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<GastoCreateWithoutUsuarioInput, GastoUncheckedCreateWithoutUsuarioInput> | GastoCreateWithoutUsuarioInput[] | GastoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: GastoCreateOrConnectWithoutUsuarioInput | GastoCreateOrConnectWithoutUsuarioInput[]
    upsert?: GastoUpsertWithWhereUniqueWithoutUsuarioInput | GastoUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: GastoCreateManyUsuarioInputEnvelope
    set?: GastoWhereUniqueInput | GastoWhereUniqueInput[]
    disconnect?: GastoWhereUniqueInput | GastoWhereUniqueInput[]
    delete?: GastoWhereUniqueInput | GastoWhereUniqueInput[]
    connect?: GastoWhereUniqueInput | GastoWhereUniqueInput[]
    update?: GastoUpdateWithWhereUniqueWithoutUsuarioInput | GastoUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: GastoUpdateManyWithWhereWithoutUsuarioInput | GastoUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: GastoScalarWhereInput | GastoScalarWhereInput[]
  }

  export type ContaFixaUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<ContaFixaCreateWithoutUsuarioInput, ContaFixaUncheckedCreateWithoutUsuarioInput> | ContaFixaCreateWithoutUsuarioInput[] | ContaFixaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: ContaFixaCreateOrConnectWithoutUsuarioInput | ContaFixaCreateOrConnectWithoutUsuarioInput[]
    upsert?: ContaFixaUpsertWithWhereUniqueWithoutUsuarioInput | ContaFixaUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: ContaFixaCreateManyUsuarioInputEnvelope
    set?: ContaFixaWhereUniqueInput | ContaFixaWhereUniqueInput[]
    disconnect?: ContaFixaWhereUniqueInput | ContaFixaWhereUniqueInput[]
    delete?: ContaFixaWhereUniqueInput | ContaFixaWhereUniqueInput[]
    connect?: ContaFixaWhereUniqueInput | ContaFixaWhereUniqueInput[]
    update?: ContaFixaUpdateWithWhereUniqueWithoutUsuarioInput | ContaFixaUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: ContaFixaUpdateManyWithWhereWithoutUsuarioInput | ContaFixaUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: ContaFixaScalarWhereInput | ContaFixaScalarWhereInput[]
  }

  export type GastoUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<GastoCreateWithoutUsuarioInput, GastoUncheckedCreateWithoutUsuarioInput> | GastoCreateWithoutUsuarioInput[] | GastoUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: GastoCreateOrConnectWithoutUsuarioInput | GastoCreateOrConnectWithoutUsuarioInput[]
    upsert?: GastoUpsertWithWhereUniqueWithoutUsuarioInput | GastoUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: GastoCreateManyUsuarioInputEnvelope
    set?: GastoWhereUniqueInput | GastoWhereUniqueInput[]
    disconnect?: GastoWhereUniqueInput | GastoWhereUniqueInput[]
    delete?: GastoWhereUniqueInput | GastoWhereUniqueInput[]
    connect?: GastoWhereUniqueInput | GastoWhereUniqueInput[]
    update?: GastoUpdateWithWhereUniqueWithoutUsuarioInput | GastoUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: GastoUpdateManyWithWhereWithoutUsuarioInput | GastoUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: GastoScalarWhereInput | GastoScalarWhereInput[]
  }

  export type ContaFixaUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<ContaFixaCreateWithoutUsuarioInput, ContaFixaUncheckedCreateWithoutUsuarioInput> | ContaFixaCreateWithoutUsuarioInput[] | ContaFixaUncheckedCreateWithoutUsuarioInput[]
    connectOrCreate?: ContaFixaCreateOrConnectWithoutUsuarioInput | ContaFixaCreateOrConnectWithoutUsuarioInput[]
    upsert?: ContaFixaUpsertWithWhereUniqueWithoutUsuarioInput | ContaFixaUpsertWithWhereUniqueWithoutUsuarioInput[]
    createMany?: ContaFixaCreateManyUsuarioInputEnvelope
    set?: ContaFixaWhereUniqueInput | ContaFixaWhereUniqueInput[]
    disconnect?: ContaFixaWhereUniqueInput | ContaFixaWhereUniqueInput[]
    delete?: ContaFixaWhereUniqueInput | ContaFixaWhereUniqueInput[]
    connect?: ContaFixaWhereUniqueInput | ContaFixaWhereUniqueInput[]
    update?: ContaFixaUpdateWithWhereUniqueWithoutUsuarioInput | ContaFixaUpdateWithWhereUniqueWithoutUsuarioInput[]
    updateMany?: ContaFixaUpdateManyWithWhereWithoutUsuarioInput | ContaFixaUpdateManyWithWhereWithoutUsuarioInput[]
    deleteMany?: ContaFixaScalarWhereInput | ContaFixaScalarWhereInput[]
  }

  export type UsuarioCreateNestedOneWithoutGastosInput = {
    create?: XOR<UsuarioCreateWithoutGastosInput, UsuarioUncheckedCreateWithoutGastosInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutGastosInput
    connect?: UsuarioWhereUniqueInput
  }

  export type ParcelaCreateNestedManyWithoutGastoPrincipalInput = {
    create?: XOR<ParcelaCreateWithoutGastoPrincipalInput, ParcelaUncheckedCreateWithoutGastoPrincipalInput> | ParcelaCreateWithoutGastoPrincipalInput[] | ParcelaUncheckedCreateWithoutGastoPrincipalInput[]
    connectOrCreate?: ParcelaCreateOrConnectWithoutGastoPrincipalInput | ParcelaCreateOrConnectWithoutGastoPrincipalInput[]
    createMany?: ParcelaCreateManyGastoPrincipalInputEnvelope
    connect?: ParcelaWhereUniqueInput | ParcelaWhereUniqueInput[]
  }

  export type ParcelaUncheckedCreateNestedManyWithoutGastoPrincipalInput = {
    create?: XOR<ParcelaCreateWithoutGastoPrincipalInput, ParcelaUncheckedCreateWithoutGastoPrincipalInput> | ParcelaCreateWithoutGastoPrincipalInput[] | ParcelaUncheckedCreateWithoutGastoPrincipalInput[]
    connectOrCreate?: ParcelaCreateOrConnectWithoutGastoPrincipalInput | ParcelaCreateOrConnectWithoutGastoPrincipalInput[]
    createMany?: ParcelaCreateManyGastoPrincipalInputEnvelope
    connect?: ParcelaWhereUniqueInput | ParcelaWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumTipoGastoFieldUpdateOperationsInput = {
    set?: $Enums.TipoGasto
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumStatusPagamentoFieldUpdateOperationsInput = {
    set?: $Enums.StatusPagamento
  }

  export type UsuarioUpdateOneRequiredWithoutGastosNestedInput = {
    create?: XOR<UsuarioCreateWithoutGastosInput, UsuarioUncheckedCreateWithoutGastosInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutGastosInput
    upsert?: UsuarioUpsertWithoutGastosInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutGastosInput, UsuarioUpdateWithoutGastosInput>, UsuarioUncheckedUpdateWithoutGastosInput>
  }

  export type ParcelaUpdateManyWithoutGastoPrincipalNestedInput = {
    create?: XOR<ParcelaCreateWithoutGastoPrincipalInput, ParcelaUncheckedCreateWithoutGastoPrincipalInput> | ParcelaCreateWithoutGastoPrincipalInput[] | ParcelaUncheckedCreateWithoutGastoPrincipalInput[]
    connectOrCreate?: ParcelaCreateOrConnectWithoutGastoPrincipalInput | ParcelaCreateOrConnectWithoutGastoPrincipalInput[]
    upsert?: ParcelaUpsertWithWhereUniqueWithoutGastoPrincipalInput | ParcelaUpsertWithWhereUniqueWithoutGastoPrincipalInput[]
    createMany?: ParcelaCreateManyGastoPrincipalInputEnvelope
    set?: ParcelaWhereUniqueInput | ParcelaWhereUniqueInput[]
    disconnect?: ParcelaWhereUniqueInput | ParcelaWhereUniqueInput[]
    delete?: ParcelaWhereUniqueInput | ParcelaWhereUniqueInput[]
    connect?: ParcelaWhereUniqueInput | ParcelaWhereUniqueInput[]
    update?: ParcelaUpdateWithWhereUniqueWithoutGastoPrincipalInput | ParcelaUpdateWithWhereUniqueWithoutGastoPrincipalInput[]
    updateMany?: ParcelaUpdateManyWithWhereWithoutGastoPrincipalInput | ParcelaUpdateManyWithWhereWithoutGastoPrincipalInput[]
    deleteMany?: ParcelaScalarWhereInput | ParcelaScalarWhereInput[]
  }

  export type ParcelaUncheckedUpdateManyWithoutGastoPrincipalNestedInput = {
    create?: XOR<ParcelaCreateWithoutGastoPrincipalInput, ParcelaUncheckedCreateWithoutGastoPrincipalInput> | ParcelaCreateWithoutGastoPrincipalInput[] | ParcelaUncheckedCreateWithoutGastoPrincipalInput[]
    connectOrCreate?: ParcelaCreateOrConnectWithoutGastoPrincipalInput | ParcelaCreateOrConnectWithoutGastoPrincipalInput[]
    upsert?: ParcelaUpsertWithWhereUniqueWithoutGastoPrincipalInput | ParcelaUpsertWithWhereUniqueWithoutGastoPrincipalInput[]
    createMany?: ParcelaCreateManyGastoPrincipalInputEnvelope
    set?: ParcelaWhereUniqueInput | ParcelaWhereUniqueInput[]
    disconnect?: ParcelaWhereUniqueInput | ParcelaWhereUniqueInput[]
    delete?: ParcelaWhereUniqueInput | ParcelaWhereUniqueInput[]
    connect?: ParcelaWhereUniqueInput | ParcelaWhereUniqueInput[]
    update?: ParcelaUpdateWithWhereUniqueWithoutGastoPrincipalInput | ParcelaUpdateWithWhereUniqueWithoutGastoPrincipalInput[]
    updateMany?: ParcelaUpdateManyWithWhereWithoutGastoPrincipalInput | ParcelaUpdateManyWithWhereWithoutGastoPrincipalInput[]
    deleteMany?: ParcelaScalarWhereInput | ParcelaScalarWhereInput[]
  }

  export type UsuarioCreateNestedOneWithoutContasFixasInput = {
    create?: XOR<UsuarioCreateWithoutContasFixasInput, UsuarioUncheckedCreateWithoutContasFixasInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutContasFixasInput
    connect?: UsuarioWhereUniqueInput
  }

  export type UsuarioUpdateOneRequiredWithoutContasFixasNestedInput = {
    create?: XOR<UsuarioCreateWithoutContasFixasInput, UsuarioUncheckedCreateWithoutContasFixasInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutContasFixasInput
    upsert?: UsuarioUpsertWithoutContasFixasInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<XOR<UsuarioUpdateToOneWithWhereWithoutContasFixasInput, UsuarioUpdateWithoutContasFixasInput>, UsuarioUncheckedUpdateWithoutContasFixasInput>
  }

  export type GastoCreateNestedOneWithoutParcelasGastoInput = {
    create?: XOR<GastoCreateWithoutParcelasGastoInput, GastoUncheckedCreateWithoutParcelasGastoInput>
    connectOrCreate?: GastoCreateOrConnectWithoutParcelasGastoInput
    connect?: GastoWhereUniqueInput
  }

  export type GastoUpdateOneRequiredWithoutParcelasGastoNestedInput = {
    create?: XOR<GastoCreateWithoutParcelasGastoInput, GastoUncheckedCreateWithoutParcelasGastoInput>
    connectOrCreate?: GastoCreateOrConnectWithoutParcelasGastoInput
    upsert?: GastoUpsertWithoutParcelasGastoInput
    connect?: GastoWhereUniqueInput
    update?: XOR<XOR<GastoUpdateToOneWithWhereWithoutParcelasGastoInput, GastoUpdateWithoutParcelasGastoInput>, GastoUncheckedUpdateWithoutParcelasGastoInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumTipoGastoFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoGasto | EnumTipoGastoFieldRefInput<$PrismaModel>
    in?: $Enums.TipoGasto[] | ListEnumTipoGastoFieldRefInput<$PrismaModel>
    notIn?: $Enums.TipoGasto[] | ListEnumTipoGastoFieldRefInput<$PrismaModel>
    not?: NestedEnumTipoGastoFilter<$PrismaModel> | $Enums.TipoGasto
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumStatusPagamentoFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusPagamento | EnumStatusPagamentoFieldRefInput<$PrismaModel>
    in?: $Enums.StatusPagamento[] | ListEnumStatusPagamentoFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusPagamento[] | ListEnumStatusPagamentoFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusPagamentoFilter<$PrismaModel> | $Enums.StatusPagamento
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumTipoGastoWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoGasto | EnumTipoGastoFieldRefInput<$PrismaModel>
    in?: $Enums.TipoGasto[] | ListEnumTipoGastoFieldRefInput<$PrismaModel>
    notIn?: $Enums.TipoGasto[] | ListEnumTipoGastoFieldRefInput<$PrismaModel>
    not?: NestedEnumTipoGastoWithAggregatesFilter<$PrismaModel> | $Enums.TipoGasto
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTipoGastoFilter<$PrismaModel>
    _max?: NestedEnumTipoGastoFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumStatusPagamentoWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatusPagamento | EnumStatusPagamentoFieldRefInput<$PrismaModel>
    in?: $Enums.StatusPagamento[] | ListEnumStatusPagamentoFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatusPagamento[] | ListEnumStatusPagamentoFieldRefInput<$PrismaModel>
    not?: NestedEnumStatusPagamentoWithAggregatesFilter<$PrismaModel> | $Enums.StatusPagamento
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusPagamentoFilter<$PrismaModel>
    _max?: NestedEnumStatusPagamentoFilter<$PrismaModel>
  }

  export type GastoCreateWithoutUsuarioInput = {
    id?: string
    descricao: string
    valor: number
    dataVencimento: Date | string
    tipo: $Enums.TipoGasto
    parcelas?: number
    parcelaAtual?: number | null
    data?: Date | string
    status?: $Enums.StatusPagamento
    createdAt?: Date | string
    updatedAt?: Date | string
    parcelasGasto?: ParcelaCreateNestedManyWithoutGastoPrincipalInput
  }

  export type GastoUncheckedCreateWithoutUsuarioInput = {
    id?: string
    descricao: string
    valor: number
    dataVencimento: Date | string
    tipo: $Enums.TipoGasto
    parcelas?: number
    parcelaAtual?: number | null
    data?: Date | string
    status?: $Enums.StatusPagamento
    createdAt?: Date | string
    updatedAt?: Date | string
    parcelasGasto?: ParcelaUncheckedCreateNestedManyWithoutGastoPrincipalInput
  }

  export type GastoCreateOrConnectWithoutUsuarioInput = {
    where: GastoWhereUniqueInput
    create: XOR<GastoCreateWithoutUsuarioInput, GastoUncheckedCreateWithoutUsuarioInput>
  }

  export type GastoCreateManyUsuarioInputEnvelope = {
    data: GastoCreateManyUsuarioInput | GastoCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type ContaFixaCreateWithoutUsuarioInput = {
    id?: string
    nome: string
    valor: number
    status?: $Enums.StatusPagamento
    dataVencimento: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContaFixaUncheckedCreateWithoutUsuarioInput = {
    id?: string
    nome: string
    valor: number
    status?: $Enums.StatusPagamento
    dataVencimento: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContaFixaCreateOrConnectWithoutUsuarioInput = {
    where: ContaFixaWhereUniqueInput
    create: XOR<ContaFixaCreateWithoutUsuarioInput, ContaFixaUncheckedCreateWithoutUsuarioInput>
  }

  export type ContaFixaCreateManyUsuarioInputEnvelope = {
    data: ContaFixaCreateManyUsuarioInput | ContaFixaCreateManyUsuarioInput[]
    skipDuplicates?: boolean
  }

  export type GastoUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: GastoWhereUniqueInput
    update: XOR<GastoUpdateWithoutUsuarioInput, GastoUncheckedUpdateWithoutUsuarioInput>
    create: XOR<GastoCreateWithoutUsuarioInput, GastoUncheckedCreateWithoutUsuarioInput>
  }

  export type GastoUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: GastoWhereUniqueInput
    data: XOR<GastoUpdateWithoutUsuarioInput, GastoUncheckedUpdateWithoutUsuarioInput>
  }

  export type GastoUpdateManyWithWhereWithoutUsuarioInput = {
    where: GastoScalarWhereInput
    data: XOR<GastoUpdateManyMutationInput, GastoUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type GastoScalarWhereInput = {
    AND?: GastoScalarWhereInput | GastoScalarWhereInput[]
    OR?: GastoScalarWhereInput[]
    NOT?: GastoScalarWhereInput | GastoScalarWhereInput[]
    id?: StringFilter<"Gasto"> | string
    descricao?: StringFilter<"Gasto"> | string
    valor?: FloatFilter<"Gasto"> | number
    dataVencimento?: DateTimeFilter<"Gasto"> | Date | string
    tipo?: EnumTipoGastoFilter<"Gasto"> | $Enums.TipoGasto
    parcelas?: IntFilter<"Gasto"> | number
    parcelaAtual?: IntNullableFilter<"Gasto"> | number | null
    data?: DateTimeFilter<"Gasto"> | Date | string
    status?: EnumStatusPagamentoFilter<"Gasto"> | $Enums.StatusPagamento
    usuarioId?: StringFilter<"Gasto"> | string
    createdAt?: DateTimeFilter<"Gasto"> | Date | string
    updatedAt?: DateTimeFilter<"Gasto"> | Date | string
  }

  export type ContaFixaUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: ContaFixaWhereUniqueInput
    update: XOR<ContaFixaUpdateWithoutUsuarioInput, ContaFixaUncheckedUpdateWithoutUsuarioInput>
    create: XOR<ContaFixaCreateWithoutUsuarioInput, ContaFixaUncheckedCreateWithoutUsuarioInput>
  }

  export type ContaFixaUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: ContaFixaWhereUniqueInput
    data: XOR<ContaFixaUpdateWithoutUsuarioInput, ContaFixaUncheckedUpdateWithoutUsuarioInput>
  }

  export type ContaFixaUpdateManyWithWhereWithoutUsuarioInput = {
    where: ContaFixaScalarWhereInput
    data: XOR<ContaFixaUpdateManyMutationInput, ContaFixaUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type ContaFixaScalarWhereInput = {
    AND?: ContaFixaScalarWhereInput | ContaFixaScalarWhereInput[]
    OR?: ContaFixaScalarWhereInput[]
    NOT?: ContaFixaScalarWhereInput | ContaFixaScalarWhereInput[]
    id?: StringFilter<"ContaFixa"> | string
    nome?: StringFilter<"ContaFixa"> | string
    valor?: FloatFilter<"ContaFixa"> | number
    status?: EnumStatusPagamentoFilter<"ContaFixa"> | $Enums.StatusPagamento
    dataVencimento?: DateTimeFilter<"ContaFixa"> | Date | string
    usuarioId?: StringFilter<"ContaFixa"> | string
    createdAt?: DateTimeFilter<"ContaFixa"> | Date | string
    updatedAt?: DateTimeFilter<"ContaFixa"> | Date | string
  }

  export type UsuarioCreateWithoutGastosInput = {
    id?: string
    nome: string
    email: string
    senha: string
    createdAt?: Date | string
    updatedAt?: Date | string
    contasFixas?: ContaFixaCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutGastosInput = {
    id?: string
    nome: string
    email: string
    senha: string
    createdAt?: Date | string
    updatedAt?: Date | string
    contasFixas?: ContaFixaUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutGastosInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutGastosInput, UsuarioUncheckedCreateWithoutGastosInput>
  }

  export type ParcelaCreateWithoutGastoPrincipalInput = {
    id?: string
    descricao: string
    valor: number
    dataVencimento: Date | string
    numeroParcela: number
    totalParcelas: number
    status?: $Enums.StatusPagamento
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ParcelaUncheckedCreateWithoutGastoPrincipalInput = {
    id?: string
    descricao: string
    valor: number
    dataVencimento: Date | string
    numeroParcela: number
    totalParcelas: number
    status?: $Enums.StatusPagamento
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ParcelaCreateOrConnectWithoutGastoPrincipalInput = {
    where: ParcelaWhereUniqueInput
    create: XOR<ParcelaCreateWithoutGastoPrincipalInput, ParcelaUncheckedCreateWithoutGastoPrincipalInput>
  }

  export type ParcelaCreateManyGastoPrincipalInputEnvelope = {
    data: ParcelaCreateManyGastoPrincipalInput | ParcelaCreateManyGastoPrincipalInput[]
    skipDuplicates?: boolean
  }

  export type UsuarioUpsertWithoutGastosInput = {
    update: XOR<UsuarioUpdateWithoutGastosInput, UsuarioUncheckedUpdateWithoutGastosInput>
    create: XOR<UsuarioCreateWithoutGastosInput, UsuarioUncheckedCreateWithoutGastosInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutGastosInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutGastosInput, UsuarioUncheckedUpdateWithoutGastosInput>
  }

  export type UsuarioUpdateWithoutGastosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contasFixas?: ContaFixaUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutGastosInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    contasFixas?: ContaFixaUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type ParcelaUpsertWithWhereUniqueWithoutGastoPrincipalInput = {
    where: ParcelaWhereUniqueInput
    update: XOR<ParcelaUpdateWithoutGastoPrincipalInput, ParcelaUncheckedUpdateWithoutGastoPrincipalInput>
    create: XOR<ParcelaCreateWithoutGastoPrincipalInput, ParcelaUncheckedCreateWithoutGastoPrincipalInput>
  }

  export type ParcelaUpdateWithWhereUniqueWithoutGastoPrincipalInput = {
    where: ParcelaWhereUniqueInput
    data: XOR<ParcelaUpdateWithoutGastoPrincipalInput, ParcelaUncheckedUpdateWithoutGastoPrincipalInput>
  }

  export type ParcelaUpdateManyWithWhereWithoutGastoPrincipalInput = {
    where: ParcelaScalarWhereInput
    data: XOR<ParcelaUpdateManyMutationInput, ParcelaUncheckedUpdateManyWithoutGastoPrincipalInput>
  }

  export type ParcelaScalarWhereInput = {
    AND?: ParcelaScalarWhereInput | ParcelaScalarWhereInput[]
    OR?: ParcelaScalarWhereInput[]
    NOT?: ParcelaScalarWhereInput | ParcelaScalarWhereInput[]
    id?: StringFilter<"Parcela"> | string
    descricao?: StringFilter<"Parcela"> | string
    valor?: FloatFilter<"Parcela"> | number
    dataVencimento?: DateTimeFilter<"Parcela"> | Date | string
    numeroParcela?: IntFilter<"Parcela"> | number
    totalParcelas?: IntFilter<"Parcela"> | number
    status?: EnumStatusPagamentoFilter<"Parcela"> | $Enums.StatusPagamento
    idGastoPrincipal?: StringFilter<"Parcela"> | string
    createdAt?: DateTimeFilter<"Parcela"> | Date | string
    updatedAt?: DateTimeFilter<"Parcela"> | Date | string
  }

  export type UsuarioCreateWithoutContasFixasInput = {
    id?: string
    nome: string
    email: string
    senha: string
    createdAt?: Date | string
    updatedAt?: Date | string
    gastos?: GastoCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioUncheckedCreateWithoutContasFixasInput = {
    id?: string
    nome: string
    email: string
    senha: string
    createdAt?: Date | string
    updatedAt?: Date | string
    gastos?: GastoUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type UsuarioCreateOrConnectWithoutContasFixasInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutContasFixasInput, UsuarioUncheckedCreateWithoutContasFixasInput>
  }

  export type UsuarioUpsertWithoutContasFixasInput = {
    update: XOR<UsuarioUpdateWithoutContasFixasInput, UsuarioUncheckedUpdateWithoutContasFixasInput>
    create: XOR<UsuarioCreateWithoutContasFixasInput, UsuarioUncheckedCreateWithoutContasFixasInput>
    where?: UsuarioWhereInput
  }

  export type UsuarioUpdateToOneWithWhereWithoutContasFixasInput = {
    where?: UsuarioWhereInput
    data: XOR<UsuarioUpdateWithoutContasFixasInput, UsuarioUncheckedUpdateWithoutContasFixasInput>
  }

  export type UsuarioUpdateWithoutContasFixasInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gastos?: GastoUpdateManyWithoutUsuarioNestedInput
  }

  export type UsuarioUncheckedUpdateWithoutContasFixasInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    gastos?: GastoUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type GastoCreateWithoutParcelasGastoInput = {
    id?: string
    descricao: string
    valor: number
    dataVencimento: Date | string
    tipo: $Enums.TipoGasto
    parcelas?: number
    parcelaAtual?: number | null
    data?: Date | string
    status?: $Enums.StatusPagamento
    createdAt?: Date | string
    updatedAt?: Date | string
    usuario: UsuarioCreateNestedOneWithoutGastosInput
  }

  export type GastoUncheckedCreateWithoutParcelasGastoInput = {
    id?: string
    descricao: string
    valor: number
    dataVencimento: Date | string
    tipo: $Enums.TipoGasto
    parcelas?: number
    parcelaAtual?: number | null
    data?: Date | string
    status?: $Enums.StatusPagamento
    usuarioId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GastoCreateOrConnectWithoutParcelasGastoInput = {
    where: GastoWhereUniqueInput
    create: XOR<GastoCreateWithoutParcelasGastoInput, GastoUncheckedCreateWithoutParcelasGastoInput>
  }

  export type GastoUpsertWithoutParcelasGastoInput = {
    update: XOR<GastoUpdateWithoutParcelasGastoInput, GastoUncheckedUpdateWithoutParcelasGastoInput>
    create: XOR<GastoCreateWithoutParcelasGastoInput, GastoUncheckedCreateWithoutParcelasGastoInput>
    where?: GastoWhereInput
  }

  export type GastoUpdateToOneWithWhereWithoutParcelasGastoInput = {
    where?: GastoWhereInput
    data: XOR<GastoUpdateWithoutParcelasGastoInput, GastoUncheckedUpdateWithoutParcelasGastoInput>
  }

  export type GastoUpdateWithoutParcelasGastoInput = {
    id?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    tipo?: EnumTipoGastoFieldUpdateOperationsInput | $Enums.TipoGasto
    parcelas?: IntFieldUpdateOperationsInput | number
    parcelaAtual?: NullableIntFieldUpdateOperationsInput | number | null
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusPagamentoFieldUpdateOperationsInput | $Enums.StatusPagamento
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    usuario?: UsuarioUpdateOneRequiredWithoutGastosNestedInput
  }

  export type GastoUncheckedUpdateWithoutParcelasGastoInput = {
    id?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    tipo?: EnumTipoGastoFieldUpdateOperationsInput | $Enums.TipoGasto
    parcelas?: IntFieldUpdateOperationsInput | number
    parcelaAtual?: NullableIntFieldUpdateOperationsInput | number | null
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusPagamentoFieldUpdateOperationsInput | $Enums.StatusPagamento
    usuarioId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GastoCreateManyUsuarioInput = {
    id?: string
    descricao: string
    valor: number
    dataVencimento: Date | string
    tipo: $Enums.TipoGasto
    parcelas?: number
    parcelaAtual?: number | null
    data?: Date | string
    status?: $Enums.StatusPagamento
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ContaFixaCreateManyUsuarioInput = {
    id?: string
    nome: string
    valor: number
    status?: $Enums.StatusPagamento
    dataVencimento: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GastoUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    tipo?: EnumTipoGastoFieldUpdateOperationsInput | $Enums.TipoGasto
    parcelas?: IntFieldUpdateOperationsInput | number
    parcelaAtual?: NullableIntFieldUpdateOperationsInput | number | null
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusPagamentoFieldUpdateOperationsInput | $Enums.StatusPagamento
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parcelasGasto?: ParcelaUpdateManyWithoutGastoPrincipalNestedInput
  }

  export type GastoUncheckedUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    tipo?: EnumTipoGastoFieldUpdateOperationsInput | $Enums.TipoGasto
    parcelas?: IntFieldUpdateOperationsInput | number
    parcelaAtual?: NullableIntFieldUpdateOperationsInput | number | null
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusPagamentoFieldUpdateOperationsInput | $Enums.StatusPagamento
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parcelasGasto?: ParcelaUncheckedUpdateManyWithoutGastoPrincipalNestedInput
  }

  export type GastoUncheckedUpdateManyWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    tipo?: EnumTipoGastoFieldUpdateOperationsInput | $Enums.TipoGasto
    parcelas?: IntFieldUpdateOperationsInput | number
    parcelaAtual?: NullableIntFieldUpdateOperationsInput | number | null
    data?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumStatusPagamentoFieldUpdateOperationsInput | $Enums.StatusPagamento
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContaFixaUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    status?: EnumStatusPagamentoFieldUpdateOperationsInput | $Enums.StatusPagamento
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContaFixaUncheckedUpdateWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    status?: EnumStatusPagamentoFieldUpdateOperationsInput | $Enums.StatusPagamento
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ContaFixaUncheckedUpdateManyWithoutUsuarioInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    status?: EnumStatusPagamentoFieldUpdateOperationsInput | $Enums.StatusPagamento
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParcelaCreateManyGastoPrincipalInput = {
    id?: string
    descricao: string
    valor: number
    dataVencimento: Date | string
    numeroParcela: number
    totalParcelas: number
    status?: $Enums.StatusPagamento
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ParcelaUpdateWithoutGastoPrincipalInput = {
    id?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    numeroParcela?: IntFieldUpdateOperationsInput | number
    totalParcelas?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusPagamentoFieldUpdateOperationsInput | $Enums.StatusPagamento
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParcelaUncheckedUpdateWithoutGastoPrincipalInput = {
    id?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    numeroParcela?: IntFieldUpdateOperationsInput | number
    totalParcelas?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusPagamentoFieldUpdateOperationsInput | $Enums.StatusPagamento
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParcelaUncheckedUpdateManyWithoutGastoPrincipalInput = {
    id?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    dataVencimento?: DateTimeFieldUpdateOperationsInput | Date | string
    numeroParcela?: IntFieldUpdateOperationsInput | number
    totalParcelas?: IntFieldUpdateOperationsInput | number
    status?: EnumStatusPagamentoFieldUpdateOperationsInput | $Enums.StatusPagamento
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UsuarioCountOutputTypeDefaultArgs instead
     */
    export type UsuarioCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsuarioCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GastoCountOutputTypeDefaultArgs instead
     */
    export type GastoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GastoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsuarioDefaultArgs instead
     */
    export type UsuarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsuarioDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GastoDefaultArgs instead
     */
    export type GastoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GastoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ContaFixaDefaultArgs instead
     */
    export type ContaFixaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ContaFixaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ParcelaDefaultArgs instead
     */
    export type ParcelaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ParcelaDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}